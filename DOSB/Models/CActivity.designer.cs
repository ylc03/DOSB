#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DOSB.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DOSB")]
	public partial class CActivityDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertClient(Client instance);
    partial void UpdateClient(Client instance);
    partial void DeleteClient(Client instance);
    partial void InsertCompany(Company instance);
    partial void UpdateCompany(Company instance);
    partial void DeleteCompany(Company instance);
    partial void InsertCompletionType(CompletionType instance);
    partial void UpdateCompletionType(CompletionType instance);
    partial void DeleteCompletionType(CompletionType instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertField(Field instance);
    partial void UpdateField(Field instance);
    partial void DeleteField(Field instance);
    partial void InsertRig(Rig instance);
    partial void UpdateRig(Rig instance);
    partial void DeleteRig(Rig instance);
    partial void InsertWell(Well instance);
    partial void UpdateWell(Well instance);
    partial void DeleteWell(Well instance);
    partial void InsertWellType(WellType instance);
    partial void UpdateWellType(WellType instance);
    partial void DeleteWellType(WellType instance);
    partial void InsertAssembly(Assembly instance);
    partial void UpdateAssembly(Assembly instance);
    partial void DeleteAssembly(Assembly instance);
    partial void InsertCompletionActivity(CompletionActivity instance);
    partial void UpdateCompletionActivity(CompletionActivity instance);
    partial void DeleteCompletionActivity(CompletionActivity instance);
    partial void InsertRigActivity(RigActivity instance);
    partial void UpdateRigActivity(RigActivity instance);
    partial void DeleteRigActivity(RigActivity instance);
    partial void InsertPressureTestLog(PressureTestLog instance);
    partial void UpdatePressureTestLog(PressureTestLog instance);
    partial void DeletePressureTestLog(PressureTestLog instance);
    #endregion
		
		public CActivityDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DOSBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CActivityDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CActivityDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CActivityDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CActivityDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Client> Clients
		{
			get
			{
				return this.GetTable<Client>();
			}
		}
		
		public System.Data.Linq.Table<Company> Companies
		{
			get
			{
				return this.GetTable<Company>();
			}
		}
		
		public System.Data.Linq.Table<CompletionType> CompletionTypes
		{
			get
			{
				return this.GetTable<CompletionType>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<Field> Fields
		{
			get
			{
				return this.GetTable<Field>();
			}
		}
		
		public System.Data.Linq.Table<Rig> Rigs
		{
			get
			{
				return this.GetTable<Rig>();
			}
		}
		
		public System.Data.Linq.Table<Well> Wells
		{
			get
			{
				return this.GetTable<Well>();
			}
		}
		
		public System.Data.Linq.Table<WellType> WellTypes
		{
			get
			{
				return this.GetTable<WellType>();
			}
		}
		
		public System.Data.Linq.Table<vwRigActivity> vwRigActivities
		{
			get
			{
				return this.GetTable<vwRigActivity>();
			}
		}
		
		public System.Data.Linq.Table<Assembly> Assemblies
		{
			get
			{
				return this.GetTable<Assembly>();
			}
		}
		
		public System.Data.Linq.Table<CompletionActivity> CompletionActivities
		{
			get
			{
				return this.GetTable<CompletionActivity>();
			}
		}
		
		public System.Data.Linq.Table<RigActivity> RigActivities
		{
			get
			{
				return this.GetTable<RigActivity>();
			}
		}
		
		public System.Data.Linq.Table<vwLowerCompletionAssembly> vwLowerCompletionAssemblies
		{
			get
			{
				return this.GetTable<vwLowerCompletionAssembly>();
			}
		}
		
		public System.Data.Linq.Table<vwUpperCompletionAssembly> vwUpperCompletionAssemblies
		{
			get
			{
				return this.GetTable<vwUpperCompletionAssembly>();
			}
		}
		
		public System.Data.Linq.Table<vwCompletionActivity> vwCompletionActivities
		{
			get
			{
				return this.GetTable<vwCompletionActivity>();
			}
		}
		
		public System.Data.Linq.Table<PressureTestLog> PressureTestLogs
		{
			get
			{
				return this.GetTable<PressureTestLog>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Clients")]
	public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClientId;
		
		private string _Name;
		
		private System.Nullable<int> _CountryId;
		
		private EntitySet<Field> _Fields;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClientIdChanging(int value);
    partial void OnClientIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCountryIdChanging(System.Nullable<int> value);
    partial void OnCountryIdChanged();
    #endregion
		
		public Client()
		{
			this._Fields = new EntitySet<Field>(new Action<Field>(this.attach_Fields), new Action<Field>(this.detach_Fields));
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ClientId
		{
			get
			{
				return this._ClientId;
			}
			set
			{
				if ((this._ClientId != value))
				{
					this.OnClientIdChanging(value);
					this.SendPropertyChanging();
					this._ClientId = value;
					this.SendPropertyChanged("ClientId");
					this.OnClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryId", DbType="Int")]
		public System.Nullable<int> CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Field", Storage="_Fields", ThisKey="ClientId", OtherKey="ClientId")]
		public EntitySet<Field> Fields
		{
			get
			{
				return this._Fields;
			}
			set
			{
				this._Fields.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Client", Storage="_Country", ThisKey="CountryId", OtherKey="CountryId", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Clients.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Clients.Add(this);
						this._CountryId = value.CountryId;
					}
					else
					{
						this._CountryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Fields(Field entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_Fields(Field entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Companies")]
	public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompanyId;
		
		private string _ShortName;
		
		private string _FullName;
		
		private string _BackgroundColor;
		
		private string _TextColor;
		
		private EntitySet<CompletionActivity> _CompletionActivities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnBackgroundColorChanging(string value);
    partial void OnBackgroundColorChanged();
    partial void OnTextColorChanging(string value);
    partial void OnTextColorChanged();
    #endregion
		
		public Company()
		{
			this._CompletionActivities = new EntitySet<CompletionActivity>(new Action<CompletionActivity>(this.attach_CompletionActivities), new Action<CompletionActivity>(this.detach_CompletionActivities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortName", DbType="VarChar(50)")]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="VarChar(50)")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BackgroundColor", DbType="Char(7)")]
		public string BackgroundColor
		{
			get
			{
				return this._BackgroundColor;
			}
			set
			{
				if ((this._BackgroundColor != value))
				{
					this.OnBackgroundColorChanging(value);
					this.SendPropertyChanging();
					this._BackgroundColor = value;
					this.SendPropertyChanged("BackgroundColor");
					this.OnBackgroundColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TextColor", DbType="Char(7)")]
		public string TextColor
		{
			get
			{
				return this._TextColor;
			}
			set
			{
				if ((this._TextColor != value))
				{
					this.OnTextColorChanging(value);
					this.SendPropertyChanging();
					this._TextColor = value;
					this.SendPropertyChanged("TextColor");
					this.OnTextColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_CompletionActivity", Storage="_CompletionActivities", ThisKey="CompanyId", OtherKey="CompanyId")]
		public EntitySet<CompletionActivity> CompletionActivities
		{
			get
			{
				return this._CompletionActivities;
			}
			set
			{
				this._CompletionActivities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CompletionActivities(CompletionActivity entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_CompletionActivities(CompletionActivity entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompletionTypes")]
	public partial class CompletionType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompletionTypeId;
		
		private string _Name;
		
		private EntityRef<RigActivity> _RigActivity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompletionTypeIdChanging(int value);
    partial void OnCompletionTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public CompletionType()
		{
			this._RigActivity = default(EntityRef<RigActivity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompletionTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CompletionTypeId
		{
			get
			{
				return this._CompletionTypeId;
			}
			set
			{
				if ((this._CompletionTypeId != value))
				{
					this.OnCompletionTypeIdChanging(value);
					this.SendPropertyChanging();
					this._CompletionTypeId = value;
					this.SendPropertyChanged("CompletionTypeId");
					this.OnCompletionTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompletionType_RigActivity", Storage="_RigActivity", ThisKey="CompletionTypeId", OtherKey="RigActivityId", IsUnique=true, IsForeignKey=false)]
		public RigActivity RigActivity
		{
			get
			{
				return this._RigActivity.Entity;
			}
			set
			{
				RigActivity previousValue = this._RigActivity.Entity;
				if (((previousValue != value) 
							|| (this._RigActivity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RigActivity.Entity = null;
						previousValue.CompletionType = null;
					}
					this._RigActivity.Entity = value;
					if ((value != null))
					{
						value.CompletionType = this;
					}
					this.SendPropertyChanged("RigActivity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Countries")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CountryId;
		
		private string _Name;
		
		private EntitySet<Client> _Clients;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountryIdChanging(int value);
    partial void OnCountryIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Country()
		{
			this._Clients = new EntitySet<Client>(new Action<Client>(this.attach_Clients), new Action<Client>(this.detach_Clients));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Client", Storage="_Clients", ThisKey="CountryId", OtherKey="CountryId")]
		public EntitySet<Client> Clients
		{
			get
			{
				return this._Clients;
			}
			set
			{
				this._Clients.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Fields")]
	public partial class Field : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FieldId;
		
		private string _Name;
		
		private System.Nullable<int> _ClientId;
		
		private EntitySet<Well> _Wells;
		
		private EntityRef<Client> _Client;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFieldIdChanging(int value);
    partial void OnFieldIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnClientIdChanging(System.Nullable<int> value);
    partial void OnClientIdChanged();
    #endregion
		
		public Field()
		{
			this._Wells = new EntitySet<Well>(new Action<Well>(this.attach_Wells), new Action<Well>(this.detach_Wells));
			this._Client = default(EntityRef<Client>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FieldId
		{
			get
			{
				return this._FieldId;
			}
			set
			{
				if ((this._FieldId != value))
				{
					this.OnFieldIdChanging(value);
					this.SendPropertyChanging();
					this._FieldId = value;
					this.SendPropertyChanged("FieldId");
					this.OnFieldIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientId", DbType="Int")]
		public System.Nullable<int> ClientId
		{
			get
			{
				return this._ClientId;
			}
			set
			{
				if ((this._ClientId != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIdChanging(value);
					this.SendPropertyChanging();
					this._ClientId = value;
					this.SendPropertyChanged("ClientId");
					this.OnClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Field_Well", Storage="_Wells", ThisKey="FieldId", OtherKey="FieldId")]
		public EntitySet<Well> Wells
		{
			get
			{
				return this._Wells;
			}
			set
			{
				this._Wells.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Field", Storage="_Client", ThisKey="ClientId", OtherKey="ClientId", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.Fields.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.Fields.Add(this);
						this._ClientId = value.ClientId;
					}
					else
					{
						this._ClientId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Wells(Well entity)
		{
			this.SendPropertyChanging();
			entity.Field = this;
		}
		
		private void detach_Wells(Well entity)
		{
			this.SendPropertyChanging();
			entity.Field = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rigs")]
	public partial class Rig : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RigId;
		
		private string _Name;
		
		private string _Type;
		
		private EntityRef<RigActivity> _RigActivity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRigIdChanging(int value);
    partial void OnRigIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    #endregion
		
		public Rig()
		{
			this._RigActivity = default(EntityRef<RigActivity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RigId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RigId
		{
			get
			{
				return this._RigId;
			}
			set
			{
				if ((this._RigId != value))
				{
					this.OnRigIdChanging(value);
					this.SendPropertyChanging();
					this._RigId = value;
					this.SendPropertyChanged("RigId");
					this.OnRigIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(50)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rig_RigActivity", Storage="_RigActivity", ThisKey="RigId", OtherKey="RigActivityId", IsUnique=true, IsForeignKey=false)]
		public RigActivity RigActivity
		{
			get
			{
				return this._RigActivity.Entity;
			}
			set
			{
				RigActivity previousValue = this._RigActivity.Entity;
				if (((previousValue != value) 
							|| (this._RigActivity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RigActivity.Entity = null;
						previousValue.Rig = null;
					}
					this._RigActivity.Entity = value;
					if ((value != null))
					{
						value.Rig = this;
					}
					this.SendPropertyChanged("RigActivity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Wells")]
	public partial class Well : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WellId;
		
		private string _Name;
		
		private System.Nullable<int> _FieldId;
		
		private string _Status;
		
		private System.Nullable<int> _TypeId;
		
		private EntitySet<RigActivity> _RigActivities;
		
		private EntityRef<Field> _Field;
		
		private EntityRef<WellType> _WellType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWellIdChanging(int value);
    partial void OnWellIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFieldIdChanging(System.Nullable<int> value);
    partial void OnFieldIdChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnTypeIdChanging(System.Nullable<int> value);
    partial void OnTypeIdChanged();
    #endregion
		
		public Well()
		{
			this._RigActivities = new EntitySet<RigActivity>(new Action<RigActivity>(this.attach_RigActivities), new Action<RigActivity>(this.detach_RigActivities));
			this._Field = default(EntityRef<Field>);
			this._WellType = default(EntityRef<WellType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WellId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int WellId
		{
			get
			{
				return this._WellId;
			}
			set
			{
				if ((this._WellId != value))
				{
					this.OnWellIdChanging(value);
					this.SendPropertyChanging();
					this._WellId = value;
					this.SendPropertyChanged("WellId");
					this.OnWellIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldId", DbType="Int")]
		public System.Nullable<int> FieldId
		{
			get
			{
				return this._FieldId;
			}
			set
			{
				if ((this._FieldId != value))
				{
					if (this._Field.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFieldIdChanging(value);
					this.SendPropertyChanging();
					this._FieldId = value;
					this.SendPropertyChanged("FieldId");
					this.OnFieldIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(50)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeId", DbType="Int")]
		public System.Nullable<int> TypeId
		{
			get
			{
				return this._TypeId;
			}
			set
			{
				if ((this._TypeId != value))
				{
					if (this._WellType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIdChanging(value);
					this.SendPropertyChanging();
					this._TypeId = value;
					this.SendPropertyChanged("TypeId");
					this.OnTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Well_RigActivity", Storage="_RigActivities", ThisKey="WellId", OtherKey="WellId")]
		public EntitySet<RigActivity> RigActivities
		{
			get
			{
				return this._RigActivities;
			}
			set
			{
				this._RigActivities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Field_Well", Storage="_Field", ThisKey="FieldId", OtherKey="FieldId", IsForeignKey=true)]
		public Field Field
		{
			get
			{
				return this._Field.Entity;
			}
			set
			{
				Field previousValue = this._Field.Entity;
				if (((previousValue != value) 
							|| (this._Field.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Field.Entity = null;
						previousValue.Wells.Remove(this);
					}
					this._Field.Entity = value;
					if ((value != null))
					{
						value.Wells.Add(this);
						this._FieldId = value.FieldId;
					}
					else
					{
						this._FieldId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Field");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WellType_Well", Storage="_WellType", ThisKey="TypeId", OtherKey="WellTypeId", IsForeignKey=true)]
		public WellType WellType
		{
			get
			{
				return this._WellType.Entity;
			}
			set
			{
				WellType previousValue = this._WellType.Entity;
				if (((previousValue != value) 
							|| (this._WellType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WellType.Entity = null;
						previousValue.Wells.Remove(this);
					}
					this._WellType.Entity = value;
					if ((value != null))
					{
						value.Wells.Add(this);
						this._TypeId = value.WellTypeId;
					}
					else
					{
						this._TypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("WellType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RigActivities(RigActivity entity)
		{
			this.SendPropertyChanging();
			entity.Well = this;
		}
		
		private void detach_RigActivities(RigActivity entity)
		{
			this.SendPropertyChanging();
			entity.Well = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WellTypes")]
	public partial class WellType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WellTypeId;
		
		private string _Name;
		
		private EntitySet<Well> _Wells;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWellTypeIdChanging(int value);
    partial void OnWellTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public WellType()
		{
			this._Wells = new EntitySet<Well>(new Action<Well>(this.attach_Wells), new Action<Well>(this.detach_Wells));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WellTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int WellTypeId
		{
			get
			{
				return this._WellTypeId;
			}
			set
			{
				if ((this._WellTypeId != value))
				{
					this.OnWellTypeIdChanging(value);
					this.SendPropertyChanging();
					this._WellTypeId = value;
					this.SendPropertyChanged("WellTypeId");
					this.OnWellTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WellType_Well", Storage="_Wells", ThisKey="WellTypeId", OtherKey="TypeId")]
		public EntitySet<Well> Wells
		{
			get
			{
				return this._Wells;
			}
			set
			{
				this._Wells.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Wells(Well entity)
		{
			this.SendPropertyChanging();
			entity.WellType = this;
		}
		
		private void detach_Wells(Well entity)
		{
			this.SendPropertyChanging();
			entity.WellType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vwRigActivity")]
	public partial class vwRigActivity
	{
		
		private string _ClientName;
		
		private string _CountryName;
		
		private string _FieldName;
		
		private string _RigName;
		
		private string _WellName;
		
		private string _WellTypeName;
		
		private string _Comment;
		
		private int _RigActivityId;
		
		private string _CompletionTypeName;
		
		private string _WellStatus;
		
		public vwRigActivity()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientName", DbType="NVarChar(50)")]
		public string ClientName
		{
			get
			{
				return this._ClientName;
			}
			set
			{
				if ((this._ClientName != value))
				{
					this._ClientName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryName", DbType="VarChar(50)")]
		public string CountryName
		{
			get
			{
				return this._CountryName;
			}
			set
			{
				if ((this._CountryName != value))
				{
					this._CountryName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldName", DbType="NVarChar(50)")]
		public string FieldName
		{
			get
			{
				return this._FieldName;
			}
			set
			{
				if ((this._FieldName != value))
				{
					this._FieldName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RigName", DbType="VarChar(50)")]
		public string RigName
		{
			get
			{
				return this._RigName;
			}
			set
			{
				if ((this._RigName != value))
				{
					this._RigName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WellName", DbType="NVarChar(50)")]
		public string WellName
		{
			get
			{
				return this._WellName;
			}
			set
			{
				if ((this._WellName != value))
				{
					this._WellName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WellTypeName", DbType="VarChar(50)")]
		public string WellTypeName
		{
			get
			{
				return this._WellTypeName;
			}
			set
			{
				if ((this._WellTypeName != value))
				{
					this._WellTypeName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="VarChar(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this._Comment = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RigActivityId", DbType="Int NOT NULL")]
		public int RigActivityId
		{
			get
			{
				return this._RigActivityId;
			}
			set
			{
				if ((this._RigActivityId != value))
				{
					this._RigActivityId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompletionTypeName", DbType="VarChar(50)")]
		public string CompletionTypeName
		{
			get
			{
				return this._CompletionTypeName;
			}
			set
			{
				if ((this._CompletionTypeName != value))
				{
					this._CompletionTypeName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WellStatus", DbType="VarChar(50)")]
		public string WellStatus
		{
			get
			{
				return this._WellStatus;
			}
			set
			{
				if ((this._WellStatus != value))
				{
					this._WellStatus = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Assemblies")]
	public partial class Assembly : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AssemblyId;
		
		private string _Name;
		
		private string _Type;
		
		private EntitySet<CompletionActivity> _CompletionActivities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssemblyIdChanging(int value);
    partial void OnAssemblyIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    #endregion
		
		public Assembly()
		{
			this._CompletionActivities = new EntitySet<CompletionActivity>(new Action<CompletionActivity>(this.attach_CompletionActivities), new Action<CompletionActivity>(this.detach_CompletionActivities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssemblyId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AssemblyId
		{
			get
			{
				return this._AssemblyId;
			}
			set
			{
				if ((this._AssemblyId != value))
				{
					this.OnAssemblyIdChanging(value);
					this.SendPropertyChanging();
					this._AssemblyId = value;
					this.SendPropertyChanged("AssemblyId");
					this.OnAssemblyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Assembly_CompletionActivity", Storage="_CompletionActivities", ThisKey="AssemblyId", OtherKey="AssemblyId")]
		public EntitySet<CompletionActivity> CompletionActivities
		{
			get
			{
				return this._CompletionActivities;
			}
			set
			{
				this._CompletionActivities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CompletionActivities(CompletionActivity entity)
		{
			this.SendPropertyChanging();
			entity.Assembly = this;
		}
		
		private void detach_CompletionActivities(CompletionActivity entity)
		{
			this.SendPropertyChanging();
			entity.Assembly = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompletionActivities")]
	public partial class CompletionActivity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RigActivityId;
		
		private int _CompanyId;
		
		private int _AssemblyId;
		
		private System.Nullable<System.DateTime> _StartAt;
		
		private System.Nullable<System.DateTime> _FinishAt;
		
		private string _Comment;
		
		private System.Nullable<System.DateTime> _ShowAt;
		
		private EntityRef<Assembly> _Assembly;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<RigActivity> _RigActivity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRigActivityIdChanging(int value);
    partial void OnRigActivityIdChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnAssemblyIdChanging(int value);
    partial void OnAssemblyIdChanged();
    partial void OnStartAtChanging(System.Nullable<System.DateTime> value);
    partial void OnStartAtChanged();
    partial void OnFinishAtChanging(System.Nullable<System.DateTime> value);
    partial void OnFinishAtChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnShowAtChanging(System.Nullable<System.DateTime> value);
    partial void OnShowAtChanged();
    #endregion
		
		public CompletionActivity()
		{
			this._Assembly = default(EntityRef<Assembly>);
			this._Company = default(EntityRef<Company>);
			this._RigActivity = default(EntityRef<RigActivity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RigActivityId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RigActivityId
		{
			get
			{
				return this._RigActivityId;
			}
			set
			{
				if ((this._RigActivityId != value))
				{
					if (this._RigActivity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRigActivityIdChanging(value);
					this.SendPropertyChanging();
					this._RigActivityId = value;
					this.SendPropertyChanged("RigActivityId");
					this.OnRigActivityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssemblyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AssemblyId
		{
			get
			{
				return this._AssemblyId;
			}
			set
			{
				if ((this._AssemblyId != value))
				{
					if (this._Assembly.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssemblyIdChanging(value);
					this.SendPropertyChanging();
					this._AssemblyId = value;
					this.SendPropertyChanged("AssemblyId");
					this.OnAssemblyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartAt", DbType="Date")]
		public System.Nullable<System.DateTime> StartAt
		{
			get
			{
				return this._StartAt;
			}
			set
			{
				if ((this._StartAt != value))
				{
					this.OnStartAtChanging(value);
					this.SendPropertyChanging();
					this._StartAt = value;
					this.SendPropertyChanged("StartAt");
					this.OnStartAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinishAt", DbType="Date")]
		public System.Nullable<System.DateTime> FinishAt
		{
			get
			{
				return this._FinishAt;
			}
			set
			{
				if ((this._FinishAt != value))
				{
					this.OnFinishAtChanging(value);
					this.SendPropertyChanging();
					this._FinishAt = value;
					this.SendPropertyChanged("FinishAt");
					this.OnFinishAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="VarChar(50)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowAt", DbType="Date")]
		public System.Nullable<System.DateTime> ShowAt
		{
			get
			{
				return this._ShowAt;
			}
			set
			{
				if ((this._ShowAt != value))
				{
					this.OnShowAtChanging(value);
					this.SendPropertyChanging();
					this._ShowAt = value;
					this.SendPropertyChanged("ShowAt");
					this.OnShowAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Assembly_CompletionActivity", Storage="_Assembly", ThisKey="AssemblyId", OtherKey="AssemblyId", IsForeignKey=true)]
		public Assembly Assembly
		{
			get
			{
				return this._Assembly.Entity;
			}
			set
			{
				Assembly previousValue = this._Assembly.Entity;
				if (((previousValue != value) 
							|| (this._Assembly.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Assembly.Entity = null;
						previousValue.CompletionActivities.Remove(this);
					}
					this._Assembly.Entity = value;
					if ((value != null))
					{
						value.CompletionActivities.Add(this);
						this._AssemblyId = value.AssemblyId;
					}
					else
					{
						this._AssemblyId = default(int);
					}
					this.SendPropertyChanged("Assembly");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_CompletionActivity", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.CompletionActivities.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.CompletionActivities.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RigActivity_CompletionActivity", Storage="_RigActivity", ThisKey="RigActivityId", OtherKey="RigActivityId", IsForeignKey=true)]
		public RigActivity RigActivity
		{
			get
			{
				return this._RigActivity.Entity;
			}
			set
			{
				RigActivity previousValue = this._RigActivity.Entity;
				if (((previousValue != value) 
							|| (this._RigActivity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RigActivity.Entity = null;
						previousValue.CompletionActivities.Remove(this);
					}
					this._RigActivity.Entity = value;
					if ((value != null))
					{
						value.CompletionActivities.Add(this);
						this._RigActivityId = value.RigActivityId;
					}
					else
					{
						this._RigActivityId = default(int);
					}
					this.SendPropertyChanged("RigActivity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RigActivities")]
	public partial class RigActivity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RigActivityId;
		
		private System.Nullable<int> _RigId;
		
		private System.Nullable<int> _WellId;
		
		private System.Nullable<int> _CompletionTypeId;
		
		private System.Nullable<System.DateTime> _StartAt;
		
		private System.Nullable<System.DateTime> _FinishAt;
		
		private System.Nullable<System.DateTime> _ShowAt;
		
		private string _Comment;
		
		private EntitySet<CompletionActivity> _CompletionActivities;
		
		private EntityRef<CompletionType> _CompletionType;
		
		private EntityRef<Rig> _Rig;
		
		private EntityRef<Well> _Well;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRigActivityIdChanging(int value);
    partial void OnRigActivityIdChanged();
    partial void OnRigIdChanging(System.Nullable<int> value);
    partial void OnRigIdChanged();
    partial void OnWellIdChanging(System.Nullable<int> value);
    partial void OnWellIdChanged();
    partial void OnCompletionTypeIdChanging(System.Nullable<int> value);
    partial void OnCompletionTypeIdChanged();
    partial void OnStartAtChanging(System.Nullable<System.DateTime> value);
    partial void OnStartAtChanged();
    partial void OnFinishAtChanging(System.Nullable<System.DateTime> value);
    partial void OnFinishAtChanged();
    partial void OnShowAtChanging(System.Nullable<System.DateTime> value);
    partial void OnShowAtChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public RigActivity()
		{
			this._CompletionActivities = new EntitySet<CompletionActivity>(new Action<CompletionActivity>(this.attach_CompletionActivities), new Action<CompletionActivity>(this.detach_CompletionActivities));
			this._CompletionType = default(EntityRef<CompletionType>);
			this._Rig = default(EntityRef<Rig>);
			this._Well = default(EntityRef<Well>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RigActivityId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RigActivityId
		{
			get
			{
				return this._RigActivityId;
			}
			set
			{
				if ((this._RigActivityId != value))
				{
					if ((this._CompletionType.HasLoadedOrAssignedValue || this._Rig.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRigActivityIdChanging(value);
					this.SendPropertyChanging();
					this._RigActivityId = value;
					this.SendPropertyChanged("RigActivityId");
					this.OnRigActivityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RigId", DbType="Int")]
		public System.Nullable<int> RigId
		{
			get
			{
				return this._RigId;
			}
			set
			{
				if ((this._RigId != value))
				{
					this.OnRigIdChanging(value);
					this.SendPropertyChanging();
					this._RigId = value;
					this.SendPropertyChanged("RigId");
					this.OnRigIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WellId", DbType="Int")]
		public System.Nullable<int> WellId
		{
			get
			{
				return this._WellId;
			}
			set
			{
				if ((this._WellId != value))
				{
					if (this._Well.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWellIdChanging(value);
					this.SendPropertyChanging();
					this._WellId = value;
					this.SendPropertyChanged("WellId");
					this.OnWellIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompletionTypeId", DbType="Int")]
		public System.Nullable<int> CompletionTypeId
		{
			get
			{
				return this._CompletionTypeId;
			}
			set
			{
				if ((this._CompletionTypeId != value))
				{
					this.OnCompletionTypeIdChanging(value);
					this.SendPropertyChanging();
					this._CompletionTypeId = value;
					this.SendPropertyChanged("CompletionTypeId");
					this.OnCompletionTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartAt", DbType="Date")]
		public System.Nullable<System.DateTime> StartAt
		{
			get
			{
				return this._StartAt;
			}
			set
			{
				if ((this._StartAt != value))
				{
					this.OnStartAtChanging(value);
					this.SendPropertyChanging();
					this._StartAt = value;
					this.SendPropertyChanged("StartAt");
					this.OnStartAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinishAt", DbType="Date")]
		public System.Nullable<System.DateTime> FinishAt
		{
			get
			{
				return this._FinishAt;
			}
			set
			{
				if ((this._FinishAt != value))
				{
					this.OnFinishAtChanging(value);
					this.SendPropertyChanging();
					this._FinishAt = value;
					this.SendPropertyChanged("FinishAt");
					this.OnFinishAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowAt", DbType="Date")]
		public System.Nullable<System.DateTime> ShowAt
		{
			get
			{
				return this._ShowAt;
			}
			set
			{
				if ((this._ShowAt != value))
				{
					this.OnShowAtChanging(value);
					this.SendPropertyChanging();
					this._ShowAt = value;
					this.SendPropertyChanged("ShowAt");
					this.OnShowAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="VarChar(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RigActivity_CompletionActivity", Storage="_CompletionActivities", ThisKey="RigActivityId", OtherKey="RigActivityId")]
		public EntitySet<CompletionActivity> CompletionActivities
		{
			get
			{
				return this._CompletionActivities;
			}
			set
			{
				this._CompletionActivities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompletionType_RigActivity", Storage="_CompletionType", ThisKey="RigActivityId", OtherKey="CompletionTypeId", IsForeignKey=true)]
		public CompletionType CompletionType
		{
			get
			{
				return this._CompletionType.Entity;
			}
			set
			{
				CompletionType previousValue = this._CompletionType.Entity;
				if (((previousValue != value) 
							|| (this._CompletionType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompletionType.Entity = null;
						previousValue.RigActivity = null;
					}
					this._CompletionType.Entity = value;
					if ((value != null))
					{
						value.RigActivity = this;
						this._RigActivityId = value.CompletionTypeId;
					}
					else
					{
						this._RigActivityId = default(int);
					}
					this.SendPropertyChanged("CompletionType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rig_RigActivity", Storage="_Rig", ThisKey="RigActivityId", OtherKey="RigId", IsForeignKey=true)]
		public Rig Rig
		{
			get
			{
				return this._Rig.Entity;
			}
			set
			{
				Rig previousValue = this._Rig.Entity;
				if (((previousValue != value) 
							|| (this._Rig.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rig.Entity = null;
						previousValue.RigActivity = null;
					}
					this._Rig.Entity = value;
					if ((value != null))
					{
						value.RigActivity = this;
						this._RigActivityId = value.RigId;
					}
					else
					{
						this._RigActivityId = default(int);
					}
					this.SendPropertyChanged("Rig");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Well_RigActivity", Storage="_Well", ThisKey="WellId", OtherKey="WellId", IsForeignKey=true)]
		public Well Well
		{
			get
			{
				return this._Well.Entity;
			}
			set
			{
				Well previousValue = this._Well.Entity;
				if (((previousValue != value) 
							|| (this._Well.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Well.Entity = null;
						previousValue.RigActivities.Remove(this);
					}
					this._Well.Entity = value;
					if ((value != null))
					{
						value.RigActivities.Add(this);
						this._WellId = value.WellId;
					}
					else
					{
						this._WellId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Well");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CompletionActivities(CompletionActivity entity)
		{
			this.SendPropertyChanging();
			entity.RigActivity = this;
		}
		
		private void detach_CompletionActivities(CompletionActivity entity)
		{
			this.SendPropertyChanging();
			entity.RigActivity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vwLowerCompletionAssembly")]
	public partial class vwLowerCompletionAssembly
	{
		
		private int _AssemblyId;
		
		private string _Name;
		
		private string _Type;
		
		public vwLowerCompletionAssembly()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssemblyId", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int AssemblyId
		{
			get
			{
				return this._AssemblyId;
			}
			set
			{
				if ((this._AssemblyId != value))
				{
					this._AssemblyId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this._Type = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vwUpperCompletionAssembly")]
	public partial class vwUpperCompletionAssembly
	{
		
		private int _AssemblyId;
		
		private string _Name;
		
		private string _Type;
		
		public vwUpperCompletionAssembly()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssemblyId", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int AssemblyId
		{
			get
			{
				return this._AssemblyId;
			}
			set
			{
				if ((this._AssemblyId != value))
				{
					this._AssemblyId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this._Type = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vwCompletionActivity")]
	public partial class vwCompletionActivity
	{
		
		private string _Comment;
		
		private string _CompanyName;
		
		private string _BackgroundColor;
		
		private string _TextColor;
		
		private int _AssemblyId;
		
		private string _AssemblyName;
		
		private string _AssemblyType;
		
		private int _RigActivityId;
		
		public vwCompletionActivity()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="VarChar(50)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this._Comment = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyName", DbType="VarChar(50)")]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this._CompanyName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BackgroundColor", DbType="Char(7)")]
		public string BackgroundColor
		{
			get
			{
				return this._BackgroundColor;
			}
			set
			{
				if ((this._BackgroundColor != value))
				{
					this._BackgroundColor = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TextColor", DbType="Char(7)")]
		public string TextColor
		{
			get
			{
				return this._TextColor;
			}
			set
			{
				if ((this._TextColor != value))
				{
					this._TextColor = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssemblyId", DbType="Int NOT NULL")]
		public int AssemblyId
		{
			get
			{
				return this._AssemblyId;
			}
			set
			{
				if ((this._AssemblyId != value))
				{
					this._AssemblyId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssemblyName", DbType="NVarChar(50)")]
		public string AssemblyName
		{
			get
			{
				return this._AssemblyName;
			}
			set
			{
				if ((this._AssemblyName != value))
				{
					this._AssemblyName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssemblyType", DbType="NVarChar(50)")]
		public string AssemblyType
		{
			get
			{
				return this._AssemblyType;
			}
			set
			{
				if ((this._AssemblyType != value))
				{
					this._AssemblyType = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RigActivityId", DbType="Int NOT NULL")]
		public int RigActivityId
		{
			get
			{
				return this._RigActivityId;
			}
			set
			{
				if ((this._RigActivityId != value))
				{
					this._RigActivityId = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PressureTest")]
	public partial class PressureTestLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PressureTestId;
		
		private string _PartNumber;
		
		private string _SerialNumber;
		
		private string _Comment;
		
		private string _AssemblyType;
		
		private System.Nullable<System.DateTime> _StartAt;
		
		private System.Nullable<System.DateTime> _FinishAt;
		
		private System.Nullable<int> _TestBy;
		
		private System.Nullable<int> _ApprovedBy;
		
		private System.Nullable<int> _Defect;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPressureTestIdChanging(int value);
    partial void OnPressureTestIdChanged();
    partial void OnPartNumberChanging(string value);
    partial void OnPartNumberChanged();
    partial void OnSerialNumberChanging(string value);
    partial void OnSerialNumberChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnAssemblyTypeChanging(string value);
    partial void OnAssemblyTypeChanged();
    partial void OnStartAtChanging(System.Nullable<System.DateTime> value);
    partial void OnStartAtChanged();
    partial void OnFinishAtChanging(System.Nullable<System.DateTime> value);
    partial void OnFinishAtChanged();
    partial void OnTestByChanging(System.Nullable<int> value);
    partial void OnTestByChanged();
    partial void OnApprovedByChanging(System.Nullable<int> value);
    partial void OnApprovedByChanged();
    partial void OnDefectChanging(System.Nullable<int> value);
    partial void OnDefectChanged();
    #endregion
		
		public PressureTestLog()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PressureTestId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PressureTestId
		{
			get
			{
				return this._PressureTestId;
			}
			set
			{
				if ((this._PressureTestId != value))
				{
					this.OnPressureTestIdChanging(value);
					this.SendPropertyChanging();
					this._PressureTestId = value;
					this.SendPropertyChanged("PressureTestId");
					this.OnPressureTestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartNumber", DbType="NVarChar(50)")]
		public string PartNumber
		{
			get
			{
				return this._PartNumber;
			}
			set
			{
				if ((this._PartNumber != value))
				{
					this.OnPartNumberChanging(value);
					this.SendPropertyChanging();
					this._PartNumber = value;
					this.SendPropertyChanged("PartNumber");
					this.OnPartNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialNumber", DbType="NVarChar(50)")]
		public string SerialNumber
		{
			get
			{
				return this._SerialNumber;
			}
			set
			{
				if ((this._SerialNumber != value))
				{
					this.OnSerialNumberChanging(value);
					this.SendPropertyChanging();
					this._SerialNumber = value;
					this.SendPropertyChanged("SerialNumber");
					this.OnSerialNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(250)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssemblyType", DbType="NVarChar(250)")]
		public string AssemblyType
		{
			get
			{
				return this._AssemblyType;
			}
			set
			{
				if ((this._AssemblyType != value))
				{
					this.OnAssemblyTypeChanging(value);
					this.SendPropertyChanging();
					this._AssemblyType = value;
					this.SendPropertyChanged("AssemblyType");
					this.OnAssemblyTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartAt
		{
			get
			{
				return this._StartAt;
			}
			set
			{
				if ((this._StartAt != value))
				{
					this.OnStartAtChanging(value);
					this.SendPropertyChanging();
					this._StartAt = value;
					this.SendPropertyChanged("StartAt");
					this.OnStartAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinishAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> FinishAt
		{
			get
			{
				return this._FinishAt;
			}
			set
			{
				if ((this._FinishAt != value))
				{
					this.OnFinishAtChanging(value);
					this.SendPropertyChanging();
					this._FinishAt = value;
					this.SendPropertyChanged("FinishAt");
					this.OnFinishAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestBy", DbType="Int")]
		public System.Nullable<int> TestBy
		{
			get
			{
				return this._TestBy;
			}
			set
			{
				if ((this._TestBy != value))
				{
					this.OnTestByChanging(value);
					this.SendPropertyChanging();
					this._TestBy = value;
					this.SendPropertyChanged("TestBy");
					this.OnTestByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApprovedBy", DbType="Int")]
		public System.Nullable<int> ApprovedBy
		{
			get
			{
				return this._ApprovedBy;
			}
			set
			{
				if ((this._ApprovedBy != value))
				{
					this.OnApprovedByChanging(value);
					this.SendPropertyChanging();
					this._ApprovedBy = value;
					this.SendPropertyChanged("ApprovedBy");
					this.OnApprovedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Defect", DbType="Int")]
		public System.Nullable<int> Defect
		{
			get
			{
				return this._Defect;
			}
			set
			{
				if ((this._Defect != value))
				{
					this.OnDefectChanging(value);
					this.SendPropertyChanging();
					this._Defect = value;
					this.SendPropertyChanged("Defect");
					this.OnDefectChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
