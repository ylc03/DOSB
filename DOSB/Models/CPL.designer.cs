#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DOSB.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DOSB")]
	public partial class CPLDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCompany(Company instance);
    partial void UpdateCompany(Company instance);
    partial void DeleteCompany(Company instance);
    partial void InsertCompletionType(CompletionType instance);
    partial void UpdateCompletionType(CompletionType instance);
    partial void DeleteCompletionType(CompletionType instance);
    partial void InsertWell(Well instance);
    partial void UpdateWell(Well instance);
    partial void DeleteWell(Well instance);
    partial void InsertWellType(WellType instance);
    partial void UpdateWellType(WellType instance);
    partial void DeleteWellType(WellType instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertSegment(Segment instance);
    partial void UpdateSegment(Segment instance);
    partial void DeleteSegment(Segment instance);
    partial void InsertWorkshopAssignment(WorkshopAssignment instance);
    partial void UpdateWorkshopAssignment(WorkshopAssignment instance);
    partial void DeleteWorkshopAssignment(WorkshopAssignment instance);
    partial void InsertWorkshopDailyActivity(WorkshopDailyActivity instance);
    partial void UpdateWorkshopDailyActivity(WorkshopDailyActivity instance);
    partial void DeleteWorkshopDailyActivity(WorkshopDailyActivity instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertAttachment(Attachment instance);
    partial void UpdateAttachment(Attachment instance);
    partial void DeleteAttachment(Attachment instance);
    partial void InsertTorque(Torque instance);
    partial void UpdateTorque(Torque instance);
    partial void DeleteTorque(Torque instance);
    partial void InsertPressureTest(PressureTest instance);
    partial void UpdatePressureTest(PressureTest instance);
    partial void DeletePressureTest(PressureTest instance);
    partial void InsertEmployeeRole(EmployeeRole instance);
    partial void UpdateEmployeeRole(EmployeeRole instance);
    partial void DeleteEmployeeRole(EmployeeRole instance);
    partial void InsertClient(Client instance);
    partial void UpdateClient(Client instance);
    partial void DeleteClient(Client instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertField(Field instance);
    partial void UpdateField(Field instance);
    partial void DeleteField(Field instance);
    partial void InsertRig(Rig instance);
    partial void UpdateRig(Rig instance);
    partial void DeleteRig(Rig instance);
    partial void InsertRigActivity(RigActivity instance);
    partial void UpdateRigActivity(RigActivity instance);
    partial void DeleteRigActivity(RigActivity instance);
    partial void InsertCompletionActivity(CompletionActivity instance);
    partial void UpdateCompletionActivity(CompletionActivity instance);
    partial void DeleteCompletionActivity(CompletionActivity instance);
    partial void InsertAssembly(Assembly instance);
    partial void UpdateAssembly(Assembly instance);
    partial void DeleteAssembly(Assembly instance);
    #endregion
		
		public CPLDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DOSBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CPLDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CPLDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CPLDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CPLDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Company> Companies
		{
			get
			{
				return this.GetTable<Company>();
			}
		}
		
		public System.Data.Linq.Table<CompletionType> CompletionTypes
		{
			get
			{
				return this.GetTable<CompletionType>();
			}
		}
		
		public System.Data.Linq.Table<Well> Wells
		{
			get
			{
				return this.GetTable<Well>();
			}
		}
		
		public System.Data.Linq.Table<WellType> WellTypes
		{
			get
			{
				return this.GetTable<WellType>();
			}
		}
		
		public System.Data.Linq.Table<vwLowerCompletionAssembly> vwLowerCompletionAssemblies
		{
			get
			{
				return this.GetTable<vwLowerCompletionAssembly>();
			}
		}
		
		public System.Data.Linq.Table<vwUpperCompletionAssembly> vwUpperCompletionAssemblies
		{
			get
			{
				return this.GetTable<vwUpperCompletionAssembly>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Segment> Segments
		{
			get
			{
				return this.GetTable<Segment>();
			}
		}
		
		public System.Data.Linq.Table<WorkshopAssignment> WorkshopAssignments
		{
			get
			{
				return this.GetTable<WorkshopAssignment>();
			}
		}
		
		public System.Data.Linq.Table<WorkshopDailyActivity> WorkshopDailyActivities
		{
			get
			{
				return this.GetTable<WorkshopDailyActivity>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<Attachment> Attachments
		{
			get
			{
				return this.GetTable<Attachment>();
			}
		}
		
		public System.Data.Linq.Table<Torque> Torques
		{
			get
			{
				return this.GetTable<Torque>();
			}
		}
		
		public System.Data.Linq.Table<PressureTest> PressureTests
		{
			get
			{
				return this.GetTable<PressureTest>();
			}
		}
		
		public System.Data.Linq.Table<EmployeeRole> EmployeeRoles
		{
			get
			{
				return this.GetTable<EmployeeRole>();
			}
		}
		
		public System.Data.Linq.Table<Client> Clients
		{
			get
			{
				return this.GetTable<Client>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<Field> Fields
		{
			get
			{
				return this.GetTable<Field>();
			}
		}
		
		public System.Data.Linq.Table<vwField> vwFields
		{
			get
			{
				return this.GetTable<vwField>();
			}
		}
		
		public System.Data.Linq.Table<Rig> Rigs
		{
			get
			{
				return this.GetTable<Rig>();
			}
		}
		
		public System.Data.Linq.Table<RigActivity> RigActivities
		{
			get
			{
				return this.GetTable<RigActivity>();
			}
		}
		
		public System.Data.Linq.Table<vwRigActivity> vwRigActivities
		{
			get
			{
				return this.GetTable<vwRigActivity>();
			}
		}
		
		public System.Data.Linq.Table<CompletionActivity> CompletionActivities
		{
			get
			{
				return this.GetTable<CompletionActivity>();
			}
		}
		
		public System.Data.Linq.Table<vwWell> vwWells
		{
			get
			{
				return this.GetTable<vwWell>();
			}
		}
		
		public System.Data.Linq.Table<vwCompletionActivity> vwCompletionActivities
		{
			get
			{
				return this.GetTable<vwCompletionActivity>();
			}
		}
		
		public System.Data.Linq.Table<Assembly> Assemblies
		{
			get
			{
				return this.GetTable<Assembly>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.fnFilterRigActivity", IsComposable=true)]
		public IQueryable<fnFilterRigActivityResult> fnFilterRigActivity([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Date")] System.Nullable<System.DateTime> startDate, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Date")] System.Nullable<System.DateTime> endDate)
		{
			return this.CreateMethodCallQuery<fnFilterRigActivityResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), startDate, endDate);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.fnFilterRigs", IsComposable=true)]
		public IQueryable<fnFilterRigsResult> fnFilterRigs([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Date")] System.Nullable<System.DateTime> startDate, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Date")] System.Nullable<System.DateTime> endDate)
		{
			return this.CreateMethodCallQuery<fnFilterRigsResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), startDate, endDate);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.fnFilterCompletionActivity", IsComposable=true)]
		public IQueryable<fnFilterCompletionActivityResult> fnFilterCompletionActivity([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Date")] System.Nullable<System.DateTime> startDate, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Date")] System.Nullable<System.DateTime> endDate)
		{
			return this.CreateMethodCallQuery<fnFilterCompletionActivityResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), startDate, endDate);
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Companies")]
	public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompanyId;
		
		private string _ShortName;
		
		private string _FullName;
		
		private string _BackgroundColor;
		
		private string _TextColor;
		
		private EntitySet<CompletionActivity> _CompletionActivities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnBackgroundColorChanging(string value);
    partial void OnBackgroundColorChanged();
    partial void OnTextColorChanging(string value);
    partial void OnTextColorChanged();
    #endregion
		
		public Company()
		{
			this._CompletionActivities = new EntitySet<CompletionActivity>(new Action<CompletionActivity>(this.attach_CompletionActivities), new Action<CompletionActivity>(this.detach_CompletionActivities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortName", DbType="VarChar(50)")]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="VarChar(50)")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BackgroundColor", DbType="Char(7)")]
		public string BackgroundColor
		{
			get
			{
				return this._BackgroundColor;
			}
			set
			{
				if ((this._BackgroundColor != value))
				{
					this.OnBackgroundColorChanging(value);
					this.SendPropertyChanging();
					this._BackgroundColor = value;
					this.SendPropertyChanged("BackgroundColor");
					this.OnBackgroundColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TextColor", DbType="Char(7)")]
		public string TextColor
		{
			get
			{
				return this._TextColor;
			}
			set
			{
				if ((this._TextColor != value))
				{
					this.OnTextColorChanging(value);
					this.SendPropertyChanging();
					this._TextColor = value;
					this.SendPropertyChanged("TextColor");
					this.OnTextColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_CompletionActivity", Storage="_CompletionActivities", ThisKey="CompanyId", OtherKey="CompanyId")]
		public EntitySet<CompletionActivity> CompletionActivities
		{
			get
			{
				return this._CompletionActivities;
			}
			set
			{
				this._CompletionActivities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CompletionActivities(CompletionActivity entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_CompletionActivities(CompletionActivity entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompletionTypes")]
	public partial class CompletionType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompletionTypeId;
		
		private string _Name;
		
		private EntitySet<RigActivity> _RigActivities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompletionTypeIdChanging(int value);
    partial void OnCompletionTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public CompletionType()
		{
			this._RigActivities = new EntitySet<RigActivity>(new Action<RigActivity>(this.attach_RigActivities), new Action<RigActivity>(this.detach_RigActivities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompletionTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CompletionTypeId
		{
			get
			{
				return this._CompletionTypeId;
			}
			set
			{
				if ((this._CompletionTypeId != value))
				{
					this.OnCompletionTypeIdChanging(value);
					this.SendPropertyChanging();
					this._CompletionTypeId = value;
					this.SendPropertyChanged("CompletionTypeId");
					this.OnCompletionTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompletionType_RigActivity", Storage="_RigActivities", ThisKey="CompletionTypeId", OtherKey="CompletionTypeId")]
		public EntitySet<RigActivity> RigActivities
		{
			get
			{
				return this._RigActivities;
			}
			set
			{
				this._RigActivities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RigActivities(RigActivity entity)
		{
			this.SendPropertyChanging();
			entity.CompletionType = this;
		}
		
		private void detach_RigActivities(RigActivity entity)
		{
			this.SendPropertyChanging();
			entity.CompletionType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Wells")]
	public partial class Well : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WellId;
		
		private string _Name;
		
		private System.Nullable<int> _FieldId;
		
		private string _Status;
		
		private System.Nullable<int> _TypeId;
		
		private EntitySet<RigActivity> _RigActivities;
		
		private EntityRef<WellType> _WellType;
		
		private EntityRef<Field> _Field;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWellIdChanging(int value);
    partial void OnWellIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFieldIdChanging(System.Nullable<int> value);
    partial void OnFieldIdChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnTypeIdChanging(System.Nullable<int> value);
    partial void OnTypeIdChanged();
    #endregion
		
		public Well()
		{
			this._RigActivities = new EntitySet<RigActivity>(new Action<RigActivity>(this.attach_RigActivities), new Action<RigActivity>(this.detach_RigActivities));
			this._WellType = default(EntityRef<WellType>);
			this._Field = default(EntityRef<Field>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WellId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int WellId
		{
			get
			{
				return this._WellId;
			}
			set
			{
				if ((this._WellId != value))
				{
					this.OnWellIdChanging(value);
					this.SendPropertyChanging();
					this._WellId = value;
					this.SendPropertyChanged("WellId");
					this.OnWellIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldId", DbType="Int")]
		public System.Nullable<int> FieldId
		{
			get
			{
				return this._FieldId;
			}
			set
			{
				if ((this._FieldId != value))
				{
					if (this._Field.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFieldIdChanging(value);
					this.SendPropertyChanging();
					this._FieldId = value;
					this.SendPropertyChanged("FieldId");
					this.OnFieldIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(50)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeId", DbType="Int")]
		public System.Nullable<int> TypeId
		{
			get
			{
				return this._TypeId;
			}
			set
			{
				if ((this._TypeId != value))
				{
					if (this._WellType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIdChanging(value);
					this.SendPropertyChanging();
					this._TypeId = value;
					this.SendPropertyChanged("TypeId");
					this.OnTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Well_RigActivity", Storage="_RigActivities", ThisKey="WellId", OtherKey="WellId")]
		public EntitySet<RigActivity> RigActivities
		{
			get
			{
				return this._RigActivities;
			}
			set
			{
				this._RigActivities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WellType_Well", Storage="_WellType", ThisKey="TypeId", OtherKey="WellTypeId", IsForeignKey=true)]
		public WellType WellType
		{
			get
			{
				return this._WellType.Entity;
			}
			set
			{
				WellType previousValue = this._WellType.Entity;
				if (((previousValue != value) 
							|| (this._WellType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WellType.Entity = null;
						previousValue.Wells.Remove(this);
					}
					this._WellType.Entity = value;
					if ((value != null))
					{
						value.Wells.Add(this);
						this._TypeId = value.WellTypeId;
					}
					else
					{
						this._TypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("WellType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Field_Well", Storage="_Field", ThisKey="FieldId", OtherKey="FieldId", IsForeignKey=true)]
		public Field Field
		{
			get
			{
				return this._Field.Entity;
			}
			set
			{
				Field previousValue = this._Field.Entity;
				if (((previousValue != value) 
							|| (this._Field.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Field.Entity = null;
						previousValue.Wells.Remove(this);
					}
					this._Field.Entity = value;
					if ((value != null))
					{
						value.Wells.Add(this);
						this._FieldId = value.FieldId;
					}
					else
					{
						this._FieldId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Field");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RigActivities(RigActivity entity)
		{
			this.SendPropertyChanging();
			entity.Well = this;
		}
		
		private void detach_RigActivities(RigActivity entity)
		{
			this.SendPropertyChanging();
			entity.Well = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WellTypes")]
	public partial class WellType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WellTypeId;
		
		private string _Name;
		
		private EntitySet<Well> _Wells;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWellTypeIdChanging(int value);
    partial void OnWellTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public WellType()
		{
			this._Wells = new EntitySet<Well>(new Action<Well>(this.attach_Wells), new Action<Well>(this.detach_Wells));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WellTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int WellTypeId
		{
			get
			{
				return this._WellTypeId;
			}
			set
			{
				if ((this._WellTypeId != value))
				{
					this.OnWellTypeIdChanging(value);
					this.SendPropertyChanging();
					this._WellTypeId = value;
					this.SendPropertyChanged("WellTypeId");
					this.OnWellTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WellType_Well", Storage="_Wells", ThisKey="WellTypeId", OtherKey="TypeId")]
		public EntitySet<Well> Wells
		{
			get
			{
				return this._Wells;
			}
			set
			{
				this._Wells.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Wells(Well entity)
		{
			this.SendPropertyChanging();
			entity.WellType = this;
		}
		
		private void detach_Wells(Well entity)
		{
			this.SendPropertyChanging();
			entity.WellType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vwLowerCompletionAssembly")]
	public partial class vwLowerCompletionAssembly
	{
		
		private int _AssemblyId;
		
		private string _Name;
		
		private string _Type;
		
		public vwLowerCompletionAssembly()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssemblyId", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int AssemblyId
		{
			get
			{
				return this._AssemblyId;
			}
			set
			{
				if ((this._AssemblyId != value))
				{
					this._AssemblyId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this._Type = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vwUpperCompletionAssembly")]
	public partial class vwUpperCompletionAssembly
	{
		
		private int _AssemblyId;
		
		private string _Name;
		
		private string _Type;
		
		public vwUpperCompletionAssembly()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssemblyId", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int AssemblyId
		{
			get
			{
				return this._AssemblyId;
			}
			set
			{
				if ((this._AssemblyId != value))
				{
					this._AssemblyId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this._Type = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleId;
		
		private string _Name;
		
		private string _FullName;
		
		private string _LDAPJobCode;
		
		private EntitySet<EmployeeRole> _EmployeeRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnLDAPJobCodeChanging(string value);
    partial void OnLDAPJobCodeChanged();
    #endregion
		
		public Role()
		{
			this._EmployeeRoles = new EntitySet<EmployeeRole>(new Action<EmployeeRole>(this.attach_EmployeeRoles), new Action<EmployeeRole>(this.detach_EmployeeRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(250)")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LDAPJobCode", DbType="NVarChar(250)")]
		public string LDAPJobCode
		{
			get
			{
				return this._LDAPJobCode;
			}
			set
			{
				if ((this._LDAPJobCode != value))
				{
					this.OnLDAPJobCodeChanging(value);
					this.SendPropertyChanging();
					this._LDAPJobCode = value;
					this.SendPropertyChanged("LDAPJobCode");
					this.OnLDAPJobCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_EmployeeRole", Storage="_EmployeeRoles", ThisKey="RoleId", OtherKey="RoleId")]
		public EntitySet<EmployeeRole> EmployeeRoles
		{
			get
			{
				return this._EmployeeRoles;
			}
			set
			{
				this._EmployeeRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmployeeRoles(EmployeeRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_EmployeeRoles(EmployeeRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Segment")]
	public partial class Segment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SegmentId;
		
		private string _Name;
		
		private string _FullName;
		
		private int _ParentId;
		
		private string _BusinessCategory;
		
		private EntitySet<Segment> _Segments;
		
		private EntitySet<Employee> _Employees;
		
		private EntityRef<Segment> _Segment1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSegmentIdChanging(int value);
    partial void OnSegmentIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnParentIdChanging(int value);
    partial void OnParentIdChanged();
    partial void OnBusinessCategoryChanging(string value);
    partial void OnBusinessCategoryChanged();
    #endregion
		
		public Segment()
		{
			this._Segments = new EntitySet<Segment>(new Action<Segment>(this.attach_Segments), new Action<Segment>(this.detach_Segments));
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._Segment1 = default(EntityRef<Segment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SegmentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SegmentId
		{
			get
			{
				return this._SegmentId;
			}
			set
			{
				if ((this._SegmentId != value))
				{
					this.OnSegmentIdChanging(value);
					this.SendPropertyChanging();
					this._SegmentId = value;
					this.SendPropertyChanged("SegmentId");
					this.OnSegmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(50)")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentId", DbType="Int NOT NULL")]
		public int ParentId
		{
			get
			{
				return this._ParentId;
			}
			set
			{
				if ((this._ParentId != value))
				{
					if (this._Segment1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIdChanging(value);
					this.SendPropertyChanging();
					this._ParentId = value;
					this.SendPropertyChanged("ParentId");
					this.OnParentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessCategory", DbType="NVarChar(50)")]
		public string BusinessCategory
		{
			get
			{
				return this._BusinessCategory;
			}
			set
			{
				if ((this._BusinessCategory != value))
				{
					this.OnBusinessCategoryChanging(value);
					this.SendPropertyChanging();
					this._BusinessCategory = value;
					this.SendPropertyChanged("BusinessCategory");
					this.OnBusinessCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Segment_Segment", Storage="_Segments", ThisKey="SegmentId", OtherKey="ParentId")]
		public EntitySet<Segment> Segments
		{
			get
			{
				return this._Segments;
			}
			set
			{
				this._Segments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Segment_Employee", Storage="_Employees", ThisKey="SegmentId", OtherKey="SegmentId")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Segment_Segment", Storage="_Segment1", ThisKey="ParentId", OtherKey="SegmentId", IsForeignKey=true)]
		public Segment Segment1
		{
			get
			{
				return this._Segment1.Entity;
			}
			set
			{
				Segment previousValue = this._Segment1.Entity;
				if (((previousValue != value) 
							|| (this._Segment1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Segment1.Entity = null;
						previousValue.Segments.Remove(this);
					}
					this._Segment1.Entity = value;
					if ((value != null))
					{
						value.Segments.Add(this);
						this._ParentId = value.SegmentId;
					}
					else
					{
						this._ParentId = default(int);
					}
					this.SendPropertyChanged("Segment1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Segments(Segment entity)
		{
			this.SendPropertyChanging();
			entity.Segment1 = this;
		}
		
		private void detach_Segments(Segment entity)
		{
			this.SendPropertyChanging();
			entity.Segment1 = null;
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Segment = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Segment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkshopAssignment")]
	public partial class WorkshopAssignment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeId;
		
		private int _WorkshopDailyActivityId;
		
		private System.DateTime _AssignedAt;
		
		private System.Nullable<System.DateTime> _EndedAt;
		
		private EntityRef<WorkshopDailyActivity> _WorkshopDailyActivity;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIdChanging(int value);
    partial void OnEmployeeIdChanged();
    partial void OnWorkshopDailyActivityIdChanging(int value);
    partial void OnWorkshopDailyActivityIdChanged();
    partial void OnAssignedAtChanging(System.DateTime value);
    partial void OnAssignedAtChanged();
    partial void OnEndedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnEndedAtChanged();
    #endregion
		
		public WorkshopAssignment()
		{
			this._WorkshopDailyActivity = default(EntityRef<WorkshopDailyActivity>);
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkshopDailyActivityId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int WorkshopDailyActivityId
		{
			get
			{
				return this._WorkshopDailyActivityId;
			}
			set
			{
				if ((this._WorkshopDailyActivityId != value))
				{
					if (this._WorkshopDailyActivity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkshopDailyActivityIdChanging(value);
					this.SendPropertyChanging();
					this._WorkshopDailyActivityId = value;
					this.SendPropertyChanged("WorkshopDailyActivityId");
					this.OnWorkshopDailyActivityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssignedAt", DbType="DateTime NOT NULL")]
		public System.DateTime AssignedAt
		{
			get
			{
				return this._AssignedAt;
			}
			set
			{
				if ((this._AssignedAt != value))
				{
					this.OnAssignedAtChanging(value);
					this.SendPropertyChanging();
					this._AssignedAt = value;
					this.SendPropertyChanged("AssignedAt");
					this.OnAssignedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndedAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndedAt
		{
			get
			{
				return this._EndedAt;
			}
			set
			{
				if ((this._EndedAt != value))
				{
					this.OnEndedAtChanging(value);
					this.SendPropertyChanging();
					this._EndedAt = value;
					this.SendPropertyChanged("EndedAt");
					this.OnEndedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkshopDailyActivity_WorkshopAssignment", Storage="_WorkshopDailyActivity", ThisKey="WorkshopDailyActivityId", OtherKey="ActivityId", IsForeignKey=true)]
		public WorkshopDailyActivity WorkshopDailyActivity
		{
			get
			{
				return this._WorkshopDailyActivity.Entity;
			}
			set
			{
				WorkshopDailyActivity previousValue = this._WorkshopDailyActivity.Entity;
				if (((previousValue != value) 
							|| (this._WorkshopDailyActivity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkshopDailyActivity.Entity = null;
						previousValue.WorkshopAssignments.Remove(this);
					}
					this._WorkshopDailyActivity.Entity = value;
					if ((value != null))
					{
						value.WorkshopAssignments.Add(this);
						this._WorkshopDailyActivityId = value.ActivityId;
					}
					else
					{
						this._WorkshopDailyActivityId = default(int);
					}
					this.SendPropertyChanged("WorkshopDailyActivity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_WorkshopAssignment", Storage="_Employee", ThisKey="EmployeeId", OtherKey="EmployeeId", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.WorkshopAssignments.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.WorkshopAssignments.Add(this);
						this._EmployeeId = value.EmployeeId;
					}
					else
					{
						this._EmployeeId = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkshopDailyActivity")]
	public partial class WorkshopDailyActivity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ActivityId;
		
		private string _Description;
		
		private int _Forklift;
		
		private int _Torque;
		
		private int _PressureTest;
		
		private System.Nullable<System.DateTime> _CreatedAt;
		
		private System.Nullable<System.DateTime> _FinishedAt;
		
		private System.Nullable<System.DateTime> _CanceledAt;
		
		private EntitySet<WorkshopAssignment> _WorkshopAssignments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActivityIdChanging(int value);
    partial void OnActivityIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnForkliftChanging(int value);
    partial void OnForkliftChanged();
    partial void OnTorqueChanging(int value);
    partial void OnTorqueChanged();
    partial void OnPressureTestChanging(int value);
    partial void OnPressureTestChanged();
    partial void OnCreatedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedAtChanged();
    partial void OnFinishedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnFinishedAtChanged();
    partial void OnCanceledAtChanging(System.Nullable<System.DateTime> value);
    partial void OnCanceledAtChanged();
    #endregion
		
		public WorkshopDailyActivity()
		{
			this._WorkshopAssignments = new EntitySet<WorkshopAssignment>(new Action<WorkshopAssignment>(this.attach_WorkshopAssignments), new Action<WorkshopAssignment>(this.detach_WorkshopAssignments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivityId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ActivityId
		{
			get
			{
				return this._ActivityId;
			}
			set
			{
				if ((this._ActivityId != value))
				{
					this.OnActivityIdChanging(value);
					this.SendPropertyChanging();
					this._ActivityId = value;
					this.SendPropertyChanged("ActivityId");
					this.OnActivityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Forklift", DbType="Int NOT NULL")]
		public int Forklift
		{
			get
			{
				return this._Forklift;
			}
			set
			{
				if ((this._Forklift != value))
				{
					this.OnForkliftChanging(value);
					this.SendPropertyChanging();
					this._Forklift = value;
					this.SendPropertyChanged("Forklift");
					this.OnForkliftChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Torque", DbType="Int NOT NULL")]
		public int Torque
		{
			get
			{
				return this._Torque;
			}
			set
			{
				if ((this._Torque != value))
				{
					this.OnTorqueChanging(value);
					this.SendPropertyChanging();
					this._Torque = value;
					this.SendPropertyChanged("Torque");
					this.OnTorqueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PressureTest", DbType="Int NOT NULL")]
		public int PressureTest
		{
			get
			{
				return this._PressureTest;
			}
			set
			{
				if ((this._PressureTest != value))
				{
					this.OnPressureTestChanging(value);
					this.SendPropertyChanging();
					this._PressureTest = value;
					this.SendPropertyChanged("PressureTest");
					this.OnPressureTestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedAt
		{
			get
			{
				return this._CreatedAt;
			}
			set
			{
				if ((this._CreatedAt != value))
				{
					this.OnCreatedAtChanging(value);
					this.SendPropertyChanging();
					this._CreatedAt = value;
					this.SendPropertyChanged("CreatedAt");
					this.OnCreatedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinishedAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> FinishedAt
		{
			get
			{
				return this._FinishedAt;
			}
			set
			{
				if ((this._FinishedAt != value))
				{
					this.OnFinishedAtChanging(value);
					this.SendPropertyChanging();
					this._FinishedAt = value;
					this.SendPropertyChanged("FinishedAt");
					this.OnFinishedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanceledAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> CanceledAt
		{
			get
			{
				return this._CanceledAt;
			}
			set
			{
				if ((this._CanceledAt != value))
				{
					this.OnCanceledAtChanging(value);
					this.SendPropertyChanging();
					this._CanceledAt = value;
					this.SendPropertyChanged("CanceledAt");
					this.OnCanceledAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkshopDailyActivity_WorkshopAssignment", Storage="_WorkshopAssignments", ThisKey="ActivityId", OtherKey="WorkshopDailyActivityId")]
		public EntitySet<WorkshopAssignment> WorkshopAssignments
		{
			get
			{
				return this._WorkshopAssignments;
			}
			set
			{
				this._WorkshopAssignments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WorkshopAssignments(WorkshopAssignment entity)
		{
			this.SendPropertyChanging();
			entity.WorkshopDailyActivity = this;
		}
		
		private void detach_WorkshopAssignments(WorkshopAssignment entity)
		{
			this.SendPropertyChanging();
			entity.WorkshopDailyActivity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeId;
		
		private string _LDAP;
		
		private string _Status;
		
		private System.Nullable<int> _SegmentId;
		
		private System.Data.Linq.Binary _Avatar;
		
		private string _GivenName;
		
		private string _SurName;
		
		private string _Mobile;
		
		private string _PersonalMobile;
		
		private string _AramcoID;
		
		private System.Nullable<System.DateTime> _AramcoIdExpDate;
		
		private System.Nullable<System.DateTime> _H2SExpDate;
		
		private System.Nullable<System.DateTime> _HUETExpDate;
		
		private string _GIN;
		
		private EntitySet<WorkshopAssignment> _WorkshopAssignments;
		
		private EntitySet<Torque> _Torques;
		
		private EntitySet<Torque> _Torques1;
		
		private EntitySet<PressureTest> _PressureTests;
		
		private EntitySet<PressureTest> _PressureTests1;
		
		private EntitySet<EmployeeRole> _EmployeeRoles;
		
		private EntitySet<Rig> _Rigs;
		
		private EntityRef<Segment> _Segment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIdChanging(int value);
    partial void OnEmployeeIdChanged();
    partial void OnLDAPChanging(string value);
    partial void OnLDAPChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnSegmentIdChanging(System.Nullable<int> value);
    partial void OnSegmentIdChanged();
    partial void OnAvatarChanging(System.Data.Linq.Binary value);
    partial void OnAvatarChanged();
    partial void OnGivenNameChanging(string value);
    partial void OnGivenNameChanged();
    partial void OnSurNameChanging(string value);
    partial void OnSurNameChanged();
    partial void OnMobileChanging(string value);
    partial void OnMobileChanged();
    partial void OnPersonalMobileChanging(string value);
    partial void OnPersonalMobileChanged();
    partial void OnAramcoIDChanging(string value);
    partial void OnAramcoIDChanged();
    partial void OnAramcoIdExpDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAramcoIdExpDateChanged();
    partial void OnH2SExpDateChanging(System.Nullable<System.DateTime> value);
    partial void OnH2SExpDateChanged();
    partial void OnHUETExpDateChanging(System.Nullable<System.DateTime> value);
    partial void OnHUETExpDateChanged();
    partial void OnGINChanging(string value);
    partial void OnGINChanged();
    #endregion
		
		public Employee()
		{
			this._WorkshopAssignments = new EntitySet<WorkshopAssignment>(new Action<WorkshopAssignment>(this.attach_WorkshopAssignments), new Action<WorkshopAssignment>(this.detach_WorkshopAssignments));
			this._Torques = new EntitySet<Torque>(new Action<Torque>(this.attach_Torques), new Action<Torque>(this.detach_Torques));
			this._Torques1 = new EntitySet<Torque>(new Action<Torque>(this.attach_Torques1), new Action<Torque>(this.detach_Torques1));
			this._PressureTests = new EntitySet<PressureTest>(new Action<PressureTest>(this.attach_PressureTests), new Action<PressureTest>(this.detach_PressureTests));
			this._PressureTests1 = new EntitySet<PressureTest>(new Action<PressureTest>(this.attach_PressureTests1), new Action<PressureTest>(this.detach_PressureTests1));
			this._EmployeeRoles = new EntitySet<EmployeeRole>(new Action<EmployeeRole>(this.attach_EmployeeRoles), new Action<EmployeeRole>(this.detach_EmployeeRoles));
			this._Rigs = new EntitySet<Rig>(new Action<Rig>(this.attach_Rigs), new Action<Rig>(this.detach_Rigs));
			this._Segment = default(EntityRef<Segment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LDAP", DbType="NVarChar(50)")]
		public string LDAP
		{
			get
			{
				return this._LDAP;
			}
			set
			{
				if ((this._LDAP != value))
				{
					this.OnLDAPChanging(value);
					this.SendPropertyChanging();
					this._LDAP = value;
					this.SendPropertyChanged("LDAP");
					this.OnLDAPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SegmentId", DbType="Int")]
		public System.Nullable<int> SegmentId
		{
			get
			{
				return this._SegmentId;
			}
			set
			{
				if ((this._SegmentId != value))
				{
					if (this._Segment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSegmentIdChanging(value);
					this.SendPropertyChanging();
					this._SegmentId = value;
					this.SendPropertyChanged("SegmentId");
					this.OnSegmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Avatar", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Avatar
		{
			get
			{
				return this._Avatar;
			}
			set
			{
				if ((this._Avatar != value))
				{
					this.OnAvatarChanging(value);
					this.SendPropertyChanging();
					this._Avatar = value;
					this.SendPropertyChanged("Avatar");
					this.OnAvatarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GivenName", DbType="NVarChar(50)")]
		public string GivenName
		{
			get
			{
				return this._GivenName;
			}
			set
			{
				if ((this._GivenName != value))
				{
					this.OnGivenNameChanging(value);
					this.SendPropertyChanging();
					this._GivenName = value;
					this.SendPropertyChanged("GivenName");
					this.OnGivenNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SurName", DbType="NVarChar(50)")]
		public string SurName
		{
			get
			{
				return this._SurName;
			}
			set
			{
				if ((this._SurName != value))
				{
					this.OnSurNameChanging(value);
					this.SendPropertyChanging();
					this._SurName = value;
					this.SendPropertyChanged("SurName");
					this.OnSurNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mobile", DbType="NVarChar(150)")]
		public string Mobile
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if ((this._Mobile != value))
				{
					this.OnMobileChanging(value);
					this.SendPropertyChanging();
					this._Mobile = value;
					this.SendPropertyChanged("Mobile");
					this.OnMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonalMobile", DbType="NVarChar(150)")]
		public string PersonalMobile
		{
			get
			{
				return this._PersonalMobile;
			}
			set
			{
				if ((this._PersonalMobile != value))
				{
					this.OnPersonalMobileChanging(value);
					this.SendPropertyChanging();
					this._PersonalMobile = value;
					this.SendPropertyChanged("PersonalMobile");
					this.OnPersonalMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AramcoID", DbType="NVarChar(15)")]
		public string AramcoID
		{
			get
			{
				return this._AramcoID;
			}
			set
			{
				if ((this._AramcoID != value))
				{
					this.OnAramcoIDChanging(value);
					this.SendPropertyChanging();
					this._AramcoID = value;
					this.SendPropertyChanged("AramcoID");
					this.OnAramcoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AramcoIdExpDate", DbType="Date")]
		public System.Nullable<System.DateTime> AramcoIdExpDate
		{
			get
			{
				return this._AramcoIdExpDate;
			}
			set
			{
				if ((this._AramcoIdExpDate != value))
				{
					this.OnAramcoIdExpDateChanging(value);
					this.SendPropertyChanging();
					this._AramcoIdExpDate = value;
					this.SendPropertyChanged("AramcoIdExpDate");
					this.OnAramcoIdExpDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_H2SExpDate", DbType="Date")]
		public System.Nullable<System.DateTime> H2SExpDate
		{
			get
			{
				return this._H2SExpDate;
			}
			set
			{
				if ((this._H2SExpDate != value))
				{
					this.OnH2SExpDateChanging(value);
					this.SendPropertyChanging();
					this._H2SExpDate = value;
					this.SendPropertyChanged("H2SExpDate");
					this.OnH2SExpDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HUETExpDate", DbType="Date")]
		public System.Nullable<System.DateTime> HUETExpDate
		{
			get
			{
				return this._HUETExpDate;
			}
			set
			{
				if ((this._HUETExpDate != value))
				{
					this.OnHUETExpDateChanging(value);
					this.SendPropertyChanging();
					this._HUETExpDate = value;
					this.SendPropertyChanged("HUETExpDate");
					this.OnHUETExpDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GIN", DbType="NVarChar(50)")]
		public string GIN
		{
			get
			{
				return this._GIN;
			}
			set
			{
				if ((this._GIN != value))
				{
					this.OnGINChanging(value);
					this.SendPropertyChanging();
					this._GIN = value;
					this.SendPropertyChanged("GIN");
					this.OnGINChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_WorkshopAssignment", Storage="_WorkshopAssignments", ThisKey="EmployeeId", OtherKey="EmployeeId")]
		public EntitySet<WorkshopAssignment> WorkshopAssignments
		{
			get
			{
				return this._WorkshopAssignments;
			}
			set
			{
				this._WorkshopAssignments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Torque", Storage="_Torques", ThisKey="EmployeeId", OtherKey="ApprovedBy")]
		public EntitySet<Torque> Torques
		{
			get
			{
				return this._Torques;
			}
			set
			{
				this._Torques.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Torque1", Storage="_Torques1", ThisKey="EmployeeId", OtherKey="TorqueBy")]
		public EntitySet<Torque> Torques1
		{
			get
			{
				return this._Torques1;
			}
			set
			{
				this._Torques1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_PressureTest", Storage="_PressureTests", ThisKey="EmployeeId", OtherKey="ApprovedBy")]
		public EntitySet<PressureTest> PressureTests
		{
			get
			{
				return this._PressureTests;
			}
			set
			{
				this._PressureTests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_PressureTest1", Storage="_PressureTests1", ThisKey="EmployeeId", OtherKey="TestBy")]
		public EntitySet<PressureTest> PressureTests1
		{
			get
			{
				return this._PressureTests1;
			}
			set
			{
				this._PressureTests1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeeRole", Storage="_EmployeeRoles", ThisKey="EmployeeId", OtherKey="EmployeeId")]
		public EntitySet<EmployeeRole> EmployeeRoles
		{
			get
			{
				return this._EmployeeRoles;
			}
			set
			{
				this._EmployeeRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Rig", Storage="_Rigs", ThisKey="EmployeeId", OtherKey="DeskEngId")]
		public EntitySet<Rig> Rigs
		{
			get
			{
				return this._Rigs;
			}
			set
			{
				this._Rigs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Segment_Employee", Storage="_Segment", ThisKey="SegmentId", OtherKey="SegmentId", IsForeignKey=true)]
		public Segment Segment
		{
			get
			{
				return this._Segment.Entity;
			}
			set
			{
				Segment previousValue = this._Segment.Entity;
				if (((previousValue != value) 
							|| (this._Segment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Segment.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Segment.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._SegmentId = value.SegmentId;
					}
					else
					{
						this._SegmentId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Segment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WorkshopAssignments(WorkshopAssignment entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_WorkshopAssignments(WorkshopAssignment entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Torques(Torque entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Torques(Torque entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Torques1(Torque entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = this;
		}
		
		private void detach_Torques1(Torque entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = null;
		}
		
		private void attach_PressureTests(PressureTest entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_PressureTests(PressureTest entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_PressureTests1(PressureTest entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = this;
		}
		
		private void detach_PressureTests1(PressureTest entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = null;
		}
		
		private void attach_EmployeeRoles(EmployeeRole entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_EmployeeRoles(EmployeeRole entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Rigs(Rig entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Rigs(Rig entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Attachment")]
	public partial class Attachment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AttachmentId;
		
		private string _AttachableType;
		
		private System.Nullable<int> _AttachableId;
		
		private string _Guid;
		
		private string _FileName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAttachmentIdChanging(int value);
    partial void OnAttachmentIdChanged();
    partial void OnAttachableTypeChanging(string value);
    partial void OnAttachableTypeChanged();
    partial void OnAttachableIdChanging(System.Nullable<int> value);
    partial void OnAttachableIdChanged();
    partial void OnGuidChanging(string value);
    partial void OnGuidChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    #endregion
		
		public Attachment()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttachmentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AttachmentId
		{
			get
			{
				return this._AttachmentId;
			}
			set
			{
				if ((this._AttachmentId != value))
				{
					this.OnAttachmentIdChanging(value);
					this.SendPropertyChanging();
					this._AttachmentId = value;
					this.SendPropertyChanged("AttachmentId");
					this.OnAttachmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttachableType", DbType="NVarChar(250)")]
		public string AttachableType
		{
			get
			{
				return this._AttachableType;
			}
			set
			{
				if ((this._AttachableType != value))
				{
					this.OnAttachableTypeChanging(value);
					this.SendPropertyChanging();
					this._AttachableType = value;
					this.SendPropertyChanged("AttachableType");
					this.OnAttachableTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttachableId", DbType="Int")]
		public System.Nullable<int> AttachableId
		{
			get
			{
				return this._AttachableId;
			}
			set
			{
				if ((this._AttachableId != value))
				{
					this.OnAttachableIdChanging(value);
					this.SendPropertyChanging();
					this._AttachableId = value;
					this.SendPropertyChanged("AttachableId");
					this.OnAttachableIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Guid", DbType="NVarChar(250)")]
		public string Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileName", DbType="NVarChar(500)")]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Torque")]
	public partial class Torque : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TorqueId;
		
		private string _PartNumber;
		
		private string _SerialNumber;
		
		private string _Comment;
		
		private string _AssemblyType;
		
		private System.Nullable<System.DateTime> _StartAt;
		
		private System.Nullable<System.DateTime> _FinishAt;
		
		private System.Nullable<int> _TorqueBy;
		
		private System.Nullable<int> _ApprovedBy;
		
		private System.Nullable<int> _Defect;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Employee> _Employee1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTorqueIdChanging(int value);
    partial void OnTorqueIdChanged();
    partial void OnPartNumberChanging(string value);
    partial void OnPartNumberChanged();
    partial void OnSerialNumberChanging(string value);
    partial void OnSerialNumberChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnAssemblyTypeChanging(string value);
    partial void OnAssemblyTypeChanged();
    partial void OnStartAtChanging(System.Nullable<System.DateTime> value);
    partial void OnStartAtChanged();
    partial void OnFinishAtChanging(System.Nullable<System.DateTime> value);
    partial void OnFinishAtChanged();
    partial void OnTorqueByChanging(System.Nullable<int> value);
    partial void OnTorqueByChanged();
    partial void OnApprovedByChanging(System.Nullable<int> value);
    partial void OnApprovedByChanged();
    partial void OnDefectChanging(System.Nullable<int> value);
    partial void OnDefectChanged();
    #endregion
		
		public Torque()
		{
			this._Employee = default(EntityRef<Employee>);
			this._Employee1 = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TorqueId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TorqueId
		{
			get
			{
				return this._TorqueId;
			}
			set
			{
				if ((this._TorqueId != value))
				{
					this.OnTorqueIdChanging(value);
					this.SendPropertyChanging();
					this._TorqueId = value;
					this.SendPropertyChanged("TorqueId");
					this.OnTorqueIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartNumber", DbType="NVarChar(50)")]
		public string PartNumber
		{
			get
			{
				return this._PartNumber;
			}
			set
			{
				if ((this._PartNumber != value))
				{
					this.OnPartNumberChanging(value);
					this.SendPropertyChanging();
					this._PartNumber = value;
					this.SendPropertyChanged("PartNumber");
					this.OnPartNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialNumber", DbType="NVarChar(50)")]
		public string SerialNumber
		{
			get
			{
				return this._SerialNumber;
			}
			set
			{
				if ((this._SerialNumber != value))
				{
					this.OnSerialNumberChanging(value);
					this.SendPropertyChanging();
					this._SerialNumber = value;
					this.SendPropertyChanged("SerialNumber");
					this.OnSerialNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(250)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssemblyType", DbType="NVarChar(250)")]
		public string AssemblyType
		{
			get
			{
				return this._AssemblyType;
			}
			set
			{
				if ((this._AssemblyType != value))
				{
					this.OnAssemblyTypeChanging(value);
					this.SendPropertyChanging();
					this._AssemblyType = value;
					this.SendPropertyChanged("AssemblyType");
					this.OnAssemblyTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartAt
		{
			get
			{
				return this._StartAt;
			}
			set
			{
				if ((this._StartAt != value))
				{
					this.OnStartAtChanging(value);
					this.SendPropertyChanging();
					this._StartAt = value;
					this.SendPropertyChanged("StartAt");
					this.OnStartAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinishAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> FinishAt
		{
			get
			{
				return this._FinishAt;
			}
			set
			{
				if ((this._FinishAt != value))
				{
					this.OnFinishAtChanging(value);
					this.SendPropertyChanging();
					this._FinishAt = value;
					this.SendPropertyChanged("FinishAt");
					this.OnFinishAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TorqueBy", DbType="Int")]
		public System.Nullable<int> TorqueBy
		{
			get
			{
				return this._TorqueBy;
			}
			set
			{
				if ((this._TorqueBy != value))
				{
					if (this._Employee1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTorqueByChanging(value);
					this.SendPropertyChanging();
					this._TorqueBy = value;
					this.SendPropertyChanged("TorqueBy");
					this.OnTorqueByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApprovedBy", DbType="Int")]
		public System.Nullable<int> ApprovedBy
		{
			get
			{
				return this._ApprovedBy;
			}
			set
			{
				if ((this._ApprovedBy != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApprovedByChanging(value);
					this.SendPropertyChanging();
					this._ApprovedBy = value;
					this.SendPropertyChanged("ApprovedBy");
					this.OnApprovedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Defect", DbType="Int")]
		public System.Nullable<int> Defect
		{
			get
			{
				return this._Defect;
			}
			set
			{
				if ((this._Defect != value))
				{
					this.OnDefectChanging(value);
					this.SendPropertyChanging();
					this._Defect = value;
					this.SendPropertyChanged("Defect");
					this.OnDefectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Torque", Storage="_Employee", ThisKey="ApprovedBy", OtherKey="EmployeeId", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Torques.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Torques.Add(this);
						this._ApprovedBy = value.EmployeeId;
					}
					else
					{
						this._ApprovedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Torque1", Storage="_Employee1", ThisKey="TorqueBy", OtherKey="EmployeeId", IsForeignKey=true)]
		public Employee Employee1
		{
			get
			{
				return this._Employee1.Entity;
			}
			set
			{
				Employee previousValue = this._Employee1.Entity;
				if (((previousValue != value) 
							|| (this._Employee1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee1.Entity = null;
						previousValue.Torques1.Remove(this);
					}
					this._Employee1.Entity = value;
					if ((value != null))
					{
						value.Torques1.Add(this);
						this._TorqueBy = value.EmployeeId;
					}
					else
					{
						this._TorqueBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PressureTest")]
	public partial class PressureTest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PressureTestId;
		
		private string _PartNumber;
		
		private string _SerialNumber;
		
		private string _Comment;
		
		private string _AssemblyType;
		
		private System.Nullable<System.DateTime> _StartAt;
		
		private System.Nullable<System.DateTime> _FinishAt;
		
		private System.Nullable<int> _TestBy;
		
		private System.Nullable<int> _ApprovedBy;
		
		private System.Nullable<int> _Defect;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Employee> _Employee1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPressureTestIdChanging(int value);
    partial void OnPressureTestIdChanged();
    partial void OnPartNumberChanging(string value);
    partial void OnPartNumberChanged();
    partial void OnSerialNumberChanging(string value);
    partial void OnSerialNumberChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnAssemblyTypeChanging(string value);
    partial void OnAssemblyTypeChanged();
    partial void OnStartAtChanging(System.Nullable<System.DateTime> value);
    partial void OnStartAtChanged();
    partial void OnFinishAtChanging(System.Nullable<System.DateTime> value);
    partial void OnFinishAtChanged();
    partial void OnTestByChanging(System.Nullable<int> value);
    partial void OnTestByChanged();
    partial void OnApprovedByChanging(System.Nullable<int> value);
    partial void OnApprovedByChanged();
    partial void OnDefectChanging(System.Nullable<int> value);
    partial void OnDefectChanged();
    #endregion
		
		public PressureTest()
		{
			this._Employee = default(EntityRef<Employee>);
			this._Employee1 = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PressureTestId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PressureTestId
		{
			get
			{
				return this._PressureTestId;
			}
			set
			{
				if ((this._PressureTestId != value))
				{
					this.OnPressureTestIdChanging(value);
					this.SendPropertyChanging();
					this._PressureTestId = value;
					this.SendPropertyChanged("PressureTestId");
					this.OnPressureTestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartNumber", DbType="NVarChar(50)")]
		public string PartNumber
		{
			get
			{
				return this._PartNumber;
			}
			set
			{
				if ((this._PartNumber != value))
				{
					this.OnPartNumberChanging(value);
					this.SendPropertyChanging();
					this._PartNumber = value;
					this.SendPropertyChanged("PartNumber");
					this.OnPartNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialNumber", DbType="NVarChar(50)")]
		public string SerialNumber
		{
			get
			{
				return this._SerialNumber;
			}
			set
			{
				if ((this._SerialNumber != value))
				{
					this.OnSerialNumberChanging(value);
					this.SendPropertyChanging();
					this._SerialNumber = value;
					this.SendPropertyChanged("SerialNumber");
					this.OnSerialNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(250)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssemblyType", DbType="NVarChar(250)")]
		public string AssemblyType
		{
			get
			{
				return this._AssemblyType;
			}
			set
			{
				if ((this._AssemblyType != value))
				{
					this.OnAssemblyTypeChanging(value);
					this.SendPropertyChanging();
					this._AssemblyType = value;
					this.SendPropertyChanged("AssemblyType");
					this.OnAssemblyTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartAt
		{
			get
			{
				return this._StartAt;
			}
			set
			{
				if ((this._StartAt != value))
				{
					this.OnStartAtChanging(value);
					this.SendPropertyChanging();
					this._StartAt = value;
					this.SendPropertyChanged("StartAt");
					this.OnStartAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinishAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> FinishAt
		{
			get
			{
				return this._FinishAt;
			}
			set
			{
				if ((this._FinishAt != value))
				{
					this.OnFinishAtChanging(value);
					this.SendPropertyChanging();
					this._FinishAt = value;
					this.SendPropertyChanged("FinishAt");
					this.OnFinishAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestBy", DbType="Int")]
		public System.Nullable<int> TestBy
		{
			get
			{
				return this._TestBy;
			}
			set
			{
				if ((this._TestBy != value))
				{
					if (this._Employee1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTestByChanging(value);
					this.SendPropertyChanging();
					this._TestBy = value;
					this.SendPropertyChanged("TestBy");
					this.OnTestByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApprovedBy", DbType="Int")]
		public System.Nullable<int> ApprovedBy
		{
			get
			{
				return this._ApprovedBy;
			}
			set
			{
				if ((this._ApprovedBy != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApprovedByChanging(value);
					this.SendPropertyChanging();
					this._ApprovedBy = value;
					this.SendPropertyChanged("ApprovedBy");
					this.OnApprovedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Defect", DbType="Int")]
		public System.Nullable<int> Defect
		{
			get
			{
				return this._Defect;
			}
			set
			{
				if ((this._Defect != value))
				{
					this.OnDefectChanging(value);
					this.SendPropertyChanging();
					this._Defect = value;
					this.SendPropertyChanged("Defect");
					this.OnDefectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_PressureTest", Storage="_Employee", ThisKey="ApprovedBy", OtherKey="EmployeeId", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.PressureTests.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.PressureTests.Add(this);
						this._ApprovedBy = value.EmployeeId;
					}
					else
					{
						this._ApprovedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_PressureTest1", Storage="_Employee1", ThisKey="TestBy", OtherKey="EmployeeId", IsForeignKey=true)]
		public Employee Employee1
		{
			get
			{
				return this._Employee1.Entity;
			}
			set
			{
				Employee previousValue = this._Employee1.Entity;
				if (((previousValue != value) 
							|| (this._Employee1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee1.Entity = null;
						previousValue.PressureTests1.Remove(this);
					}
					this._Employee1.Entity = value;
					if ((value != null))
					{
						value.PressureTests1.Add(this);
						this._TestBy = value.EmployeeId;
					}
					else
					{
						this._TestBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmployeeRoles")]
	public partial class EmployeeRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeId;
		
		private int _RoleId;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIdChanging(int value);
    partial void OnEmployeeIdChanged();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    #endregion
		
		public EmployeeRole()
		{
			this._Employee = default(EntityRef<Employee>);
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeeRole", Storage="_Employee", ThisKey="EmployeeId", OtherKey="EmployeeId", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.EmployeeRoles.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.EmployeeRoles.Add(this);
						this._EmployeeId = value.EmployeeId;
					}
					else
					{
						this._EmployeeId = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_EmployeeRole", Storage="_Role", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.EmployeeRoles.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.EmployeeRoles.Add(this);
						this._RoleId = value.RoleId;
					}
					else
					{
						this._RoleId = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Clients")]
	public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClientId;
		
		private string _Name;
		
		private EntitySet<Field> _Fields;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClientIdChanging(int value);
    partial void OnClientIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Client()
		{
			this._Fields = new EntitySet<Field>(new Action<Field>(this.attach_Fields), new Action<Field>(this.detach_Fields));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ClientId
		{
			get
			{
				return this._ClientId;
			}
			set
			{
				if ((this._ClientId != value))
				{
					this.OnClientIdChanging(value);
					this.SendPropertyChanging();
					this._ClientId = value;
					this.SendPropertyChanged("ClientId");
					this.OnClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Field", Storage="_Fields", ThisKey="ClientId", OtherKey="ClientId")]
		public EntitySet<Field> Fields
		{
			get
			{
				return this._Fields;
			}
			set
			{
				this._Fields.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Fields(Field entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_Fields(Field entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Countries")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CountryId;
		
		private string _Name;
		
		private EntitySet<Field> _Fields;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountryIdChanging(int value);
    partial void OnCountryIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Country()
		{
			this._Fields = new EntitySet<Field>(new Action<Field>(this.attach_Fields), new Action<Field>(this.detach_Fields));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Field", Storage="_Fields", ThisKey="CountryId", OtherKey="CountryId")]
		public EntitySet<Field> Fields
		{
			get
			{
				return this._Fields;
			}
			set
			{
				this._Fields.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Fields(Field entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Fields(Field entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Fields")]
	public partial class Field : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FieldId;
		
		private string _Name;
		
		private System.Nullable<int> _ClientId;
		
		private System.Nullable<int> _CountryId;
		
		private int _Deleted;
		
		private EntitySet<Well> _Wells;
		
		private EntityRef<Client> _Client;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFieldIdChanging(int value);
    partial void OnFieldIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnClientIdChanging(System.Nullable<int> value);
    partial void OnClientIdChanged();
    partial void OnCountryIdChanging(System.Nullable<int> value);
    partial void OnCountryIdChanged();
    partial void OnDeletedChanging(int value);
    partial void OnDeletedChanged();
    #endregion
		
		public Field()
		{
			this._Wells = new EntitySet<Well>(new Action<Well>(this.attach_Wells), new Action<Well>(this.detach_Wells));
			this._Client = default(EntityRef<Client>);
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FieldId
		{
			get
			{
				return this._FieldId;
			}
			set
			{
				if ((this._FieldId != value))
				{
					this.OnFieldIdChanging(value);
					this.SendPropertyChanging();
					this._FieldId = value;
					this.SendPropertyChanged("FieldId");
					this.OnFieldIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientId", DbType="Int")]
		public System.Nullable<int> ClientId
		{
			get
			{
				return this._ClientId;
			}
			set
			{
				if ((this._ClientId != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIdChanging(value);
					this.SendPropertyChanging();
					this._ClientId = value;
					this.SendPropertyChanged("ClientId");
					this.OnClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryId", DbType="Int")]
		public System.Nullable<int> CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deleted", DbType="Int NOT NULL")]
		public int Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Field_Well", Storage="_Wells", ThisKey="FieldId", OtherKey="FieldId")]
		public EntitySet<Well> Wells
		{
			get
			{
				return this._Wells;
			}
			set
			{
				this._Wells.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Field", Storage="_Client", ThisKey="ClientId", OtherKey="ClientId", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.Fields.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.Fields.Add(this);
						this._ClientId = value.ClientId;
					}
					else
					{
						this._ClientId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Field", Storage="_Country", ThisKey="CountryId", OtherKey="CountryId", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Fields.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Fields.Add(this);
						this._CountryId = value.CountryId;
					}
					else
					{
						this._CountryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Wells(Well entity)
		{
			this.SendPropertyChanging();
			entity.Field = this;
		}
		
		private void detach_Wells(Well entity)
		{
			this.SendPropertyChanging();
			entity.Field = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vwField")]
	public partial class vwField
	{
		
		private string _CountryName;
		
		private string _ClientName;
		
		private string _Name;
		
		private int _FieldId;
		
		private int _CountryId;
		
		private int _ClientId;
		
		public vwField()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryName", DbType="VarChar(50)")]
		public string CountryName
		{
			get
			{
				return this._CountryName;
			}
			set
			{
				if ((this._CountryName != value))
				{
					this._CountryName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientName", DbType="NVarChar(50)")]
		public string ClientName
		{
			get
			{
				return this._ClientName;
			}
			set
			{
				if ((this._ClientName != value))
				{
					this._ClientName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldId", DbType="Int NOT NULL")]
		public int FieldId
		{
			get
			{
				return this._FieldId;
			}
			set
			{
				if ((this._FieldId != value))
				{
					this._FieldId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryId", DbType="Int NOT NULL")]
		public int CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					this._CountryId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientId", DbType="Int NOT NULL")]
		public int ClientId
		{
			get
			{
				return this._ClientId;
			}
			set
			{
				if ((this._ClientId != value))
				{
					this._ClientId = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rigs")]
	public partial class Rig : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RigId;
		
		private string _Name;
		
		private string _Type;
		
		private System.Nullable<int> _DeskEngId;
		
		private int _Deleted;
		
		private EntitySet<RigActivity> _RigActivities;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRigIdChanging(int value);
    partial void OnRigIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnDeskEngIdChanging(System.Nullable<int> value);
    partial void OnDeskEngIdChanged();
    partial void OnDeletedChanging(int value);
    partial void OnDeletedChanged();
    #endregion
		
		public Rig()
		{
			this._RigActivities = new EntitySet<RigActivity>(new Action<RigActivity>(this.attach_RigActivities), new Action<RigActivity>(this.detach_RigActivities));
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RigId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RigId
		{
			get
			{
				return this._RigId;
			}
			set
			{
				if ((this._RigId != value))
				{
					this.OnRigIdChanging(value);
					this.SendPropertyChanging();
					this._RigId = value;
					this.SendPropertyChanged("RigId");
					this.OnRigIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(50)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeskEngId", DbType="Int")]
		public System.Nullable<int> DeskEngId
		{
			get
			{
				return this._DeskEngId;
			}
			set
			{
				if ((this._DeskEngId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeskEngIdChanging(value);
					this.SendPropertyChanging();
					this._DeskEngId = value;
					this.SendPropertyChanged("DeskEngId");
					this.OnDeskEngIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deleted", DbType="Int NOT NULL")]
		public int Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rig_RigActivity", Storage="_RigActivities", ThisKey="RigId", OtherKey="RigId")]
		public EntitySet<RigActivity> RigActivities
		{
			get
			{
				return this._RigActivities;
			}
			set
			{
				this._RigActivities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Rig", Storage="_Employee", ThisKey="DeskEngId", OtherKey="EmployeeId", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Rigs.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Rigs.Add(this);
						this._DeskEngId = value.EmployeeId;
					}
					else
					{
						this._DeskEngId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RigActivities(RigActivity entity)
		{
			this.SendPropertyChanging();
			entity.Rig = this;
		}
		
		private void detach_RigActivities(RigActivity entity)
		{
			this.SendPropertyChanging();
			entity.Rig = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RigActivities")]
	public partial class RigActivity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RigActivityId;
		
		private int _RigId;
		
		private int _WellId;
		
		private System.Nullable<int> _CompletionTypeId;
		
		private System.Nullable<System.DateTime> _StartAt;
		
		private System.Nullable<System.DateTime> _FinishAt;
		
		private System.Nullable<System.DateTime> _ShowAt;
		
		private string _Comment;
		
		private int _Deleted;
		
		private EntitySet<CompletionActivity> _CompletionActivities;
		
		private EntityRef<CompletionType> _CompletionType;
		
		private EntityRef<Rig> _Rig;
		
		private EntityRef<Well> _Well;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRigActivityIdChanging(int value);
    partial void OnRigActivityIdChanged();
    partial void OnRigIdChanging(int value);
    partial void OnRigIdChanged();
    partial void OnWellIdChanging(int value);
    partial void OnWellIdChanged();
    partial void OnCompletionTypeIdChanging(System.Nullable<int> value);
    partial void OnCompletionTypeIdChanged();
    partial void OnStartAtChanging(System.Nullable<System.DateTime> value);
    partial void OnStartAtChanged();
    partial void OnFinishAtChanging(System.Nullable<System.DateTime> value);
    partial void OnFinishAtChanged();
    partial void OnShowAtChanging(System.Nullable<System.DateTime> value);
    partial void OnShowAtChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnDeletedChanging(int value);
    partial void OnDeletedChanged();
    #endregion
		
		public RigActivity()
		{
			this._CompletionActivities = new EntitySet<CompletionActivity>(new Action<CompletionActivity>(this.attach_CompletionActivities), new Action<CompletionActivity>(this.detach_CompletionActivities));
			this._CompletionType = default(EntityRef<CompletionType>);
			this._Rig = default(EntityRef<Rig>);
			this._Well = default(EntityRef<Well>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RigActivityId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RigActivityId
		{
			get
			{
				return this._RigActivityId;
			}
			set
			{
				if ((this._RigActivityId != value))
				{
					this.OnRigActivityIdChanging(value);
					this.SendPropertyChanging();
					this._RigActivityId = value;
					this.SendPropertyChanged("RigActivityId");
					this.OnRigActivityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RigId", DbType="Int NOT NULL")]
		public int RigId
		{
			get
			{
				return this._RigId;
			}
			set
			{
				if ((this._RigId != value))
				{
					if (this._Rig.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRigIdChanging(value);
					this.SendPropertyChanging();
					this._RigId = value;
					this.SendPropertyChanged("RigId");
					this.OnRigIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WellId", DbType="Int NOT NULL")]
		public int WellId
		{
			get
			{
				return this._WellId;
			}
			set
			{
				if ((this._WellId != value))
				{
					if (this._Well.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWellIdChanging(value);
					this.SendPropertyChanging();
					this._WellId = value;
					this.SendPropertyChanged("WellId");
					this.OnWellIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompletionTypeId", DbType="Int")]
		public System.Nullable<int> CompletionTypeId
		{
			get
			{
				return this._CompletionTypeId;
			}
			set
			{
				if ((this._CompletionTypeId != value))
				{
					if (this._CompletionType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompletionTypeIdChanging(value);
					this.SendPropertyChanging();
					this._CompletionTypeId = value;
					this.SendPropertyChanged("CompletionTypeId");
					this.OnCompletionTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartAt", DbType="Date")]
		public System.Nullable<System.DateTime> StartAt
		{
			get
			{
				return this._StartAt;
			}
			set
			{
				if ((this._StartAt != value))
				{
					this.OnStartAtChanging(value);
					this.SendPropertyChanging();
					this._StartAt = value;
					this.SendPropertyChanged("StartAt");
					this.OnStartAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinishAt", DbType="Date")]
		public System.Nullable<System.DateTime> FinishAt
		{
			get
			{
				return this._FinishAt;
			}
			set
			{
				if ((this._FinishAt != value))
				{
					this.OnFinishAtChanging(value);
					this.SendPropertyChanging();
					this._FinishAt = value;
					this.SendPropertyChanged("FinishAt");
					this.OnFinishAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowAt", DbType="Date")]
		public System.Nullable<System.DateTime> ShowAt
		{
			get
			{
				return this._ShowAt;
			}
			set
			{
				if ((this._ShowAt != value))
				{
					this.OnShowAtChanging(value);
					this.SendPropertyChanging();
					this._ShowAt = value;
					this.SendPropertyChanged("ShowAt");
					this.OnShowAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="VarChar(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deleted", DbType="Int NOT NULL")]
		public int Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RigActivity_CompletionActivity", Storage="_CompletionActivities", ThisKey="RigActivityId", OtherKey="RigActivityId")]
		public EntitySet<CompletionActivity> CompletionActivities
		{
			get
			{
				return this._CompletionActivities;
			}
			set
			{
				this._CompletionActivities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompletionType_RigActivity", Storage="_CompletionType", ThisKey="CompletionTypeId", OtherKey="CompletionTypeId", IsForeignKey=true)]
		public CompletionType CompletionType
		{
			get
			{
				return this._CompletionType.Entity;
			}
			set
			{
				CompletionType previousValue = this._CompletionType.Entity;
				if (((previousValue != value) 
							|| (this._CompletionType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompletionType.Entity = null;
						previousValue.RigActivities.Remove(this);
					}
					this._CompletionType.Entity = value;
					if ((value != null))
					{
						value.RigActivities.Add(this);
						this._CompletionTypeId = value.CompletionTypeId;
					}
					else
					{
						this._CompletionTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("CompletionType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rig_RigActivity", Storage="_Rig", ThisKey="RigId", OtherKey="RigId", IsForeignKey=true)]
		public Rig Rig
		{
			get
			{
				return this._Rig.Entity;
			}
			set
			{
				Rig previousValue = this._Rig.Entity;
				if (((previousValue != value) 
							|| (this._Rig.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rig.Entity = null;
						previousValue.RigActivities.Remove(this);
					}
					this._Rig.Entity = value;
					if ((value != null))
					{
						value.RigActivities.Add(this);
						this._RigId = value.RigId;
					}
					else
					{
						this._RigId = default(int);
					}
					this.SendPropertyChanged("Rig");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Well_RigActivity", Storage="_Well", ThisKey="WellId", OtherKey="WellId", IsForeignKey=true)]
		public Well Well
		{
			get
			{
				return this._Well.Entity;
			}
			set
			{
				Well previousValue = this._Well.Entity;
				if (((previousValue != value) 
							|| (this._Well.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Well.Entity = null;
						previousValue.RigActivities.Remove(this);
					}
					this._Well.Entity = value;
					if ((value != null))
					{
						value.RigActivities.Add(this);
						this._WellId = value.WellId;
					}
					else
					{
						this._WellId = default(int);
					}
					this.SendPropertyChanged("Well");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CompletionActivities(CompletionActivity entity)
		{
			this.SendPropertyChanging();
			entity.RigActivity = this;
		}
		
		private void detach_CompletionActivities(CompletionActivity entity)
		{
			this.SendPropertyChanging();
			entity.RigActivity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vwRigActivity")]
	public partial class vwRigActivity
	{
		
		private int _RigActivityId;
		
		private string _WellName;
		
		private string _FieldName;
		
		private string _ClientName;
		
		private string _CountryName;
		
		private string _WellTypeName;
		
		private string _RigName;
		
		private string _CompletionTypeName;
		
		private int _RigId;
		
		private int _WellId;
		
		private System.Nullable<int> _CompletionTypeId;
		
		private System.Nullable<System.DateTime> _StartAt;
		
		private System.Nullable<System.DateTime> _FinishAt;
		
		private string _WellStatus;
		
		private string _Comment;
		
		public vwRigActivity()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RigActivityId", DbType="Int NOT NULL")]
		public int RigActivityId
		{
			get
			{
				return this._RigActivityId;
			}
			set
			{
				if ((this._RigActivityId != value))
				{
					this._RigActivityId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WellName", DbType="NVarChar(50)")]
		public string WellName
		{
			get
			{
				return this._WellName;
			}
			set
			{
				if ((this._WellName != value))
				{
					this._WellName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldName", DbType="NVarChar(50)")]
		public string FieldName
		{
			get
			{
				return this._FieldName;
			}
			set
			{
				if ((this._FieldName != value))
				{
					this._FieldName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientName", DbType="NVarChar(50)")]
		public string ClientName
		{
			get
			{
				return this._ClientName;
			}
			set
			{
				if ((this._ClientName != value))
				{
					this._ClientName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryName", DbType="VarChar(50)")]
		public string CountryName
		{
			get
			{
				return this._CountryName;
			}
			set
			{
				if ((this._CountryName != value))
				{
					this._CountryName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WellTypeName", DbType="VarChar(50)")]
		public string WellTypeName
		{
			get
			{
				return this._WellTypeName;
			}
			set
			{
				if ((this._WellTypeName != value))
				{
					this._WellTypeName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RigName", DbType="VarChar(50)")]
		public string RigName
		{
			get
			{
				return this._RigName;
			}
			set
			{
				if ((this._RigName != value))
				{
					this._RigName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompletionTypeName", DbType="VarChar(50)")]
		public string CompletionTypeName
		{
			get
			{
				return this._CompletionTypeName;
			}
			set
			{
				if ((this._CompletionTypeName != value))
				{
					this._CompletionTypeName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RigId", DbType="Int NOT NULL")]
		public int RigId
		{
			get
			{
				return this._RigId;
			}
			set
			{
				if ((this._RigId != value))
				{
					this._RigId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WellId", DbType="Int NOT NULL")]
		public int WellId
		{
			get
			{
				return this._WellId;
			}
			set
			{
				if ((this._WellId != value))
				{
					this._WellId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompletionTypeId", DbType="Int")]
		public System.Nullable<int> CompletionTypeId
		{
			get
			{
				return this._CompletionTypeId;
			}
			set
			{
				if ((this._CompletionTypeId != value))
				{
					this._CompletionTypeId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartAt", DbType="Date")]
		public System.Nullable<System.DateTime> StartAt
		{
			get
			{
				return this._StartAt;
			}
			set
			{
				if ((this._StartAt != value))
				{
					this._StartAt = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinishAt", DbType="Date")]
		public System.Nullable<System.DateTime> FinishAt
		{
			get
			{
				return this._FinishAt;
			}
			set
			{
				if ((this._FinishAt != value))
				{
					this._FinishAt = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WellStatus", DbType="VarChar(50)")]
		public string WellStatus
		{
			get
			{
				return this._WellStatus;
			}
			set
			{
				if ((this._WellStatus != value))
				{
					this._WellStatus = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="VarChar(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this._Comment = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompletionActivities")]
	public partial class CompletionActivity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompletionActivityId;
		
		private int _RigActivityId;
		
		private int _CompanyId;
		
		private int _AssemblyId;
		
		private System.Nullable<System.DateTime> _StartAt;
		
		private System.Nullable<System.DateTime> _FinishAt;
		
		private string _Comment;
		
		private System.Nullable<System.DateTime> _ShowAt;
		
		private int _Deleted;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<RigActivity> _RigActivity;
		
		private EntityRef<Assembly> _Assembly;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompletionActivityIdChanging(int value);
    partial void OnCompletionActivityIdChanged();
    partial void OnRigActivityIdChanging(int value);
    partial void OnRigActivityIdChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnAssemblyIdChanging(int value);
    partial void OnAssemblyIdChanged();
    partial void OnStartAtChanging(System.Nullable<System.DateTime> value);
    partial void OnStartAtChanged();
    partial void OnFinishAtChanging(System.Nullable<System.DateTime> value);
    partial void OnFinishAtChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnShowAtChanging(System.Nullable<System.DateTime> value);
    partial void OnShowAtChanged();
    partial void OnDeletedChanging(int value);
    partial void OnDeletedChanged();
    #endregion
		
		public CompletionActivity()
		{
			this._Company = default(EntityRef<Company>);
			this._RigActivity = default(EntityRef<RigActivity>);
			this._Assembly = default(EntityRef<Assembly>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompletionActivityId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CompletionActivityId
		{
			get
			{
				return this._CompletionActivityId;
			}
			set
			{
				if ((this._CompletionActivityId != value))
				{
					this.OnCompletionActivityIdChanging(value);
					this.SendPropertyChanging();
					this._CompletionActivityId = value;
					this.SendPropertyChanged("CompletionActivityId");
					this.OnCompletionActivityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RigActivityId", DbType="Int NOT NULL")]
		public int RigActivityId
		{
			get
			{
				return this._RigActivityId;
			}
			set
			{
				if ((this._RigActivityId != value))
				{
					if (this._RigActivity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRigActivityIdChanging(value);
					this.SendPropertyChanging();
					this._RigActivityId = value;
					this.SendPropertyChanged("RigActivityId");
					this.OnRigActivityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="Int NOT NULL")]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssemblyId", DbType="Int NOT NULL")]
		public int AssemblyId
		{
			get
			{
				return this._AssemblyId;
			}
			set
			{
				if ((this._AssemblyId != value))
				{
					if (this._Assembly.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssemblyIdChanging(value);
					this.SendPropertyChanging();
					this._AssemblyId = value;
					this.SendPropertyChanged("AssemblyId");
					this.OnAssemblyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartAt", DbType="Date")]
		public System.Nullable<System.DateTime> StartAt
		{
			get
			{
				return this._StartAt;
			}
			set
			{
				if ((this._StartAt != value))
				{
					this.OnStartAtChanging(value);
					this.SendPropertyChanging();
					this._StartAt = value;
					this.SendPropertyChanged("StartAt");
					this.OnStartAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinishAt", DbType="Date")]
		public System.Nullable<System.DateTime> FinishAt
		{
			get
			{
				return this._FinishAt;
			}
			set
			{
				if ((this._FinishAt != value))
				{
					this.OnFinishAtChanging(value);
					this.SendPropertyChanging();
					this._FinishAt = value;
					this.SendPropertyChanged("FinishAt");
					this.OnFinishAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="VarChar(50)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowAt", DbType="Date")]
		public System.Nullable<System.DateTime> ShowAt
		{
			get
			{
				return this._ShowAt;
			}
			set
			{
				if ((this._ShowAt != value))
				{
					this.OnShowAtChanging(value);
					this.SendPropertyChanging();
					this._ShowAt = value;
					this.SendPropertyChanged("ShowAt");
					this.OnShowAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deleted", DbType="Int NOT NULL")]
		public int Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_CompletionActivity", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.CompletionActivities.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.CompletionActivities.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RigActivity_CompletionActivity", Storage="_RigActivity", ThisKey="RigActivityId", OtherKey="RigActivityId", IsForeignKey=true)]
		public RigActivity RigActivity
		{
			get
			{
				return this._RigActivity.Entity;
			}
			set
			{
				RigActivity previousValue = this._RigActivity.Entity;
				if (((previousValue != value) 
							|| (this._RigActivity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RigActivity.Entity = null;
						previousValue.CompletionActivities.Remove(this);
					}
					this._RigActivity.Entity = value;
					if ((value != null))
					{
						value.CompletionActivities.Add(this);
						this._RigActivityId = value.RigActivityId;
					}
					else
					{
						this._RigActivityId = default(int);
					}
					this.SendPropertyChanged("RigActivity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Assembly_CompletionActivity", Storage="_Assembly", ThisKey="AssemblyId", OtherKey="AssemblyId", IsForeignKey=true)]
		public Assembly Assembly
		{
			get
			{
				return this._Assembly.Entity;
			}
			set
			{
				Assembly previousValue = this._Assembly.Entity;
				if (((previousValue != value) 
							|| (this._Assembly.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Assembly.Entity = null;
						previousValue.CompletionActivities.Remove(this);
					}
					this._Assembly.Entity = value;
					if ((value != null))
					{
						value.CompletionActivities.Add(this);
						this._AssemblyId = value.AssemblyId;
					}
					else
					{
						this._AssemblyId = default(int);
					}
					this.SendPropertyChanged("Assembly");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vwWell")]
	public partial class vwWell
	{
		
		private int _WellId;
		
		private string _Name;
		
		private System.Nullable<int> _FieldId;
		
		private string _Status;
		
		private string _WellTypeName;
		
		private System.Nullable<int> _WellTypeId;
		
		public vwWell()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WellId", DbType="Int NOT NULL")]
		public int WellId
		{
			get
			{
				return this._WellId;
			}
			set
			{
				if ((this._WellId != value))
				{
					this._WellId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldId", DbType="Int")]
		public System.Nullable<int> FieldId
		{
			get
			{
				return this._FieldId;
			}
			set
			{
				if ((this._FieldId != value))
				{
					this._FieldId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(50)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WellTypeName", DbType="VarChar(50)")]
		public string WellTypeName
		{
			get
			{
				return this._WellTypeName;
			}
			set
			{
				if ((this._WellTypeName != value))
				{
					this._WellTypeName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WellTypeId", DbType="Int")]
		public System.Nullable<int> WellTypeId
		{
			get
			{
				return this._WellTypeId;
			}
			set
			{
				if ((this._WellTypeId != value))
				{
					this._WellTypeId = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vwCompletionActivity")]
	public partial class vwCompletionActivity
	{
		
		private string _Comment;
		
		private string _CompanyName;
		
		private string _BackgroundColor;
		
		private string _TextColor;
		
		private int _AssemblyId;
		
		private string _AssemblyName;
		
		private string _AssemblyType;
		
		private int _RigActivityId;
		
		private int _CompletionActivityId;
		
		private int _Deleted;
		
		private string _WellName;
		
		private string _RigName;
		
		private System.Nullable<System.DateTime> _StartAt;
		
		private System.Nullable<System.DateTime> _FinishAt;
		
		public vwCompletionActivity()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="VarChar(50)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this._Comment = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyName", DbType="VarChar(50)")]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this._CompanyName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BackgroundColor", DbType="Char(7)")]
		public string BackgroundColor
		{
			get
			{
				return this._BackgroundColor;
			}
			set
			{
				if ((this._BackgroundColor != value))
				{
					this._BackgroundColor = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TextColor", DbType="Char(7)")]
		public string TextColor
		{
			get
			{
				return this._TextColor;
			}
			set
			{
				if ((this._TextColor != value))
				{
					this._TextColor = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssemblyId", DbType="Int NOT NULL")]
		public int AssemblyId
		{
			get
			{
				return this._AssemblyId;
			}
			set
			{
				if ((this._AssemblyId != value))
				{
					this._AssemblyId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssemblyName", DbType="NVarChar(50)")]
		public string AssemblyName
		{
			get
			{
				return this._AssemblyName;
			}
			set
			{
				if ((this._AssemblyName != value))
				{
					this._AssemblyName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssemblyType", DbType="NVarChar(50)")]
		public string AssemblyType
		{
			get
			{
				return this._AssemblyType;
			}
			set
			{
				if ((this._AssemblyType != value))
				{
					this._AssemblyType = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RigActivityId", DbType="Int NOT NULL")]
		public int RigActivityId
		{
			get
			{
				return this._RigActivityId;
			}
			set
			{
				if ((this._RigActivityId != value))
				{
					this._RigActivityId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompletionActivityId", DbType="Int NOT NULL")]
		public int CompletionActivityId
		{
			get
			{
				return this._CompletionActivityId;
			}
			set
			{
				if ((this._CompletionActivityId != value))
				{
					this._CompletionActivityId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deleted", DbType="Int NOT NULL")]
		public int Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this._Deleted = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WellName", DbType="NVarChar(50)")]
		public string WellName
		{
			get
			{
				return this._WellName;
			}
			set
			{
				if ((this._WellName != value))
				{
					this._WellName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RigName", DbType="VarChar(50)")]
		public string RigName
		{
			get
			{
				return this._RigName;
			}
			set
			{
				if ((this._RigName != value))
				{
					this._RigName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartAt", DbType="Date")]
		public System.Nullable<System.DateTime> StartAt
		{
			get
			{
				return this._StartAt;
			}
			set
			{
				if ((this._StartAt != value))
				{
					this._StartAt = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinishAt", DbType="Date")]
		public System.Nullable<System.DateTime> FinishAt
		{
			get
			{
				return this._FinishAt;
			}
			set
			{
				if ((this._FinishAt != value))
				{
					this._FinishAt = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Assemblies")]
	public partial class Assembly : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AssemblyId;
		
		private string _Name;
		
		private string _Type;
		
		private int _Hidden;
		
		private int _Deleted;
		
		private EntitySet<CompletionActivity> _CompletionActivities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssemblyIdChanging(int value);
    partial void OnAssemblyIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnHiddenChanging(int value);
    partial void OnHiddenChanged();
    partial void OnDeletedChanging(int value);
    partial void OnDeletedChanged();
    #endregion
		
		public Assembly()
		{
			this._CompletionActivities = new EntitySet<CompletionActivity>(new Action<CompletionActivity>(this.attach_CompletionActivities), new Action<CompletionActivity>(this.detach_CompletionActivities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssemblyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AssemblyId
		{
			get
			{
				return this._AssemblyId;
			}
			set
			{
				if ((this._AssemblyId != value))
				{
					this.OnAssemblyIdChanging(value);
					this.SendPropertyChanging();
					this._AssemblyId = value;
					this.SendPropertyChanged("AssemblyId");
					this.OnAssemblyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hidden", DbType="Int NOT NULL")]
		public int Hidden
		{
			get
			{
				return this._Hidden;
			}
			set
			{
				if ((this._Hidden != value))
				{
					this.OnHiddenChanging(value);
					this.SendPropertyChanging();
					this._Hidden = value;
					this.SendPropertyChanged("Hidden");
					this.OnHiddenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deleted", DbType="Int NOT NULL")]
		public int Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Assembly_CompletionActivity", Storage="_CompletionActivities", ThisKey="AssemblyId", OtherKey="AssemblyId")]
		public EntitySet<CompletionActivity> CompletionActivities
		{
			get
			{
				return this._CompletionActivities;
			}
			set
			{
				this._CompletionActivities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CompletionActivities(CompletionActivity entity)
		{
			this.SendPropertyChanging();
			entity.Assembly = this;
		}
		
		private void detach_CompletionActivities(CompletionActivity entity)
		{
			this.SendPropertyChanging();
			entity.Assembly = null;
		}
	}
	
	public partial class fnFilterRigActivityResult
	{
		
		private string _ClientName;
		
		private string _FieldName;
		
		private string _RigName;
		
		private string _WellName;
		
		private string _WellTypeName;
		
		private string _Comment;
		
		private int _RigActivityId;
		
		private string _CompletionTypeName;
		
		private string _WellStatus;
		
		private System.Nullable<System.DateTime> _StartAt;
		
		private System.Nullable<System.DateTime> _FinishAt;
		
		private int _RigId;
		
		private string _CountryName;
		
		public fnFilterRigActivityResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientName", DbType="NVarChar(50)")]
		public string ClientName
		{
			get
			{
				return this._ClientName;
			}
			set
			{
				if ((this._ClientName != value))
				{
					this._ClientName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldName", DbType="NVarChar(50)")]
		public string FieldName
		{
			get
			{
				return this._FieldName;
			}
			set
			{
				if ((this._FieldName != value))
				{
					this._FieldName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RigName", DbType="VarChar(50)")]
		public string RigName
		{
			get
			{
				return this._RigName;
			}
			set
			{
				if ((this._RigName != value))
				{
					this._RigName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WellName", DbType="NVarChar(50)")]
		public string WellName
		{
			get
			{
				return this._WellName;
			}
			set
			{
				if ((this._WellName != value))
				{
					this._WellName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WellTypeName", DbType="VarChar(50)")]
		public string WellTypeName
		{
			get
			{
				return this._WellTypeName;
			}
			set
			{
				if ((this._WellTypeName != value))
				{
					this._WellTypeName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="VarChar(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this._Comment = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RigActivityId", DbType="Int NOT NULL")]
		public int RigActivityId
		{
			get
			{
				return this._RigActivityId;
			}
			set
			{
				if ((this._RigActivityId != value))
				{
					this._RigActivityId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompletionTypeName", DbType="VarChar(50)")]
		public string CompletionTypeName
		{
			get
			{
				return this._CompletionTypeName;
			}
			set
			{
				if ((this._CompletionTypeName != value))
				{
					this._CompletionTypeName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WellStatus", DbType="VarChar(50)")]
		public string WellStatus
		{
			get
			{
				return this._WellStatus;
			}
			set
			{
				if ((this._WellStatus != value))
				{
					this._WellStatus = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartAt", DbType="Date")]
		public System.Nullable<System.DateTime> StartAt
		{
			get
			{
				return this._StartAt;
			}
			set
			{
				if ((this._StartAt != value))
				{
					this._StartAt = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinishAt", DbType="Date")]
		public System.Nullable<System.DateTime> FinishAt
		{
			get
			{
				return this._FinishAt;
			}
			set
			{
				if ((this._FinishAt != value))
				{
					this._FinishAt = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RigId", DbType="Int NOT NULL")]
		public int RigId
		{
			get
			{
				return this._RigId;
			}
			set
			{
				if ((this._RigId != value))
				{
					this._RigId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryName", DbType="VarChar(50)")]
		public string CountryName
		{
			get
			{
				return this._CountryName;
			}
			set
			{
				if ((this._CountryName != value))
				{
					this._CountryName = value;
				}
			}
		}
	}
	
	public partial class fnFilterRigsResult
	{
		
		private int _RigId;
		
		private string _Name;
		
		private System.Nullable<int> _DeskEngId;
		
		private int _Deleted;
		
		public fnFilterRigsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RigId", DbType="Int NOT NULL")]
		public int RigId
		{
			get
			{
				return this._RigId;
			}
			set
			{
				if ((this._RigId != value))
				{
					this._RigId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeskEngId", DbType="Int")]
		public System.Nullable<int> DeskEngId
		{
			get
			{
				return this._DeskEngId;
			}
			set
			{
				if ((this._DeskEngId != value))
				{
					this._DeskEngId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deleted", DbType="Int NOT NULL")]
		public int Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this._Deleted = value;
				}
			}
		}
	}
	
	public partial class fnFilterCompletionActivityResult
	{
		
		private string _Comment;
		
		private string _CompanyName;
		
		private string _BackgroundColor;
		
		private string _TextColor;
		
		private int _AssemblyId;
		
		private string _AssemblyName;
		
		private string _AssemblyType;
		
		private int _RigActivityId;
		
		private int _CompletionActivityId;
		
		private int _Deleted;
		
		private string _WellName;
		
		private string _RigName;
		
		private System.Nullable<System.DateTime> _StartAt;
		
		private System.Nullable<System.DateTime> _FinishAt;
		
		public fnFilterCompletionActivityResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="VarChar(50)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this._Comment = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyName", DbType="VarChar(50)")]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this._CompanyName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BackgroundColor", DbType="Char(7)")]
		public string BackgroundColor
		{
			get
			{
				return this._BackgroundColor;
			}
			set
			{
				if ((this._BackgroundColor != value))
				{
					this._BackgroundColor = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TextColor", DbType="Char(7)")]
		public string TextColor
		{
			get
			{
				return this._TextColor;
			}
			set
			{
				if ((this._TextColor != value))
				{
					this._TextColor = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssemblyId", DbType="Int NOT NULL")]
		public int AssemblyId
		{
			get
			{
				return this._AssemblyId;
			}
			set
			{
				if ((this._AssemblyId != value))
				{
					this._AssemblyId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssemblyName", DbType="NVarChar(50)")]
		public string AssemblyName
		{
			get
			{
				return this._AssemblyName;
			}
			set
			{
				if ((this._AssemblyName != value))
				{
					this._AssemblyName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssemblyType", DbType="NVarChar(50)")]
		public string AssemblyType
		{
			get
			{
				return this._AssemblyType;
			}
			set
			{
				if ((this._AssemblyType != value))
				{
					this._AssemblyType = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RigActivityId", DbType="Int NOT NULL")]
		public int RigActivityId
		{
			get
			{
				return this._RigActivityId;
			}
			set
			{
				if ((this._RigActivityId != value))
				{
					this._RigActivityId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompletionActivityId", DbType="Int NOT NULL")]
		public int CompletionActivityId
		{
			get
			{
				return this._CompletionActivityId;
			}
			set
			{
				if ((this._CompletionActivityId != value))
				{
					this._CompletionActivityId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deleted", DbType="Int NOT NULL")]
		public int Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this._Deleted = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WellName", DbType="NVarChar(50)")]
		public string WellName
		{
			get
			{
				return this._WellName;
			}
			set
			{
				if ((this._WellName != value))
				{
					this._WellName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RigName", DbType="VarChar(50)")]
		public string RigName
		{
			get
			{
				return this._RigName;
			}
			set
			{
				if ((this._RigName != value))
				{
					this._RigName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartAt", DbType="Date")]
		public System.Nullable<System.DateTime> StartAt
		{
			get
			{
				return this._StartAt;
			}
			set
			{
				if ((this._StartAt != value))
				{
					this._StartAt = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinishAt", DbType="Date")]
		public System.Nullable<System.DateTime> FinishAt
		{
			get
			{
				return this._FinishAt;
			}
			set
			{
				if ((this._FinishAt != value))
				{
					this._FinishAt = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
